{"version":3,"sources":["Class.js","PlatformUtils.js","LogNative.js","Log.js","IWorker.js","WasmHelper.js","CryptoWorker.js","CryptoWorkerImpl.js","BigNumber.js","NumberUtils.js","BufferUtils.js","SerialBuffer.js","MinerWorker.js","MinerWorkerImpl.js","MinerWorkerPool.js","GenesisConfig.js","ArrayUtils.js","Assert.js","MerkleTree.js","MerklePath.js","Policy.js","Serializable.js","Hash.js","PublicKey.js","Signature.js","Address.js","Account.js","PrunedAccount.js","BasicAccount.js","Contract.js","HashedTimeLockedContract.js","VestingContract.js","BlockHeader.js","BlockInterlink.js","BlockBody.js","BlockUtils.js","Block.js","Transaction.js","SignatureProof.js","BasicTransaction.js","ExtendedTransaction.js"],"names":["Class","scope","exports","self","window","[object Object]","cls","name","register","PlatformUtils","isBrowser","process","require","RTCPeerConnection","webkitRTCPeerConnection","navigator","onLine","LogNative","this","_global_level","Log","INFO","_tag_levels","localStorage","c","getItem","JSON","parse","e","console","warn","tag","level","setItem","stringify","args","isLoggable","unshift","Level","toStringTag","Date","toTimeString","substr","error","ERROR","apply","WARNING","info","debug","DEBUG","trace","TRACE","log","instance","_instance","native","_native","setLoggable","get","l","i","length","toString","constructor","msg","message","arguments","Array","prototype","slice","call","undefined","VERBOSE","ASSERT","v","isNaN","parseInt","toLowerCase","d","bind","w","t","IWorker","clazz","worker","Proxy","workerScript","_workersSupported","Nimiq","_path","createProxy","Worker","URL","createObjectURL","Blob","replace","_workerImplementation","init","size","Pool","startWorkerForProxy","start","data","command","res","postMessage","status","result","id","areWorkersAsync","_insideWebWorker","WorkerGlobalScope","_global","global","baseClazz","impl","onmessage","stubBaseOnMessage","url","resolve","head","document","getElementsByTagName","script","createElement","type","src","ret","setTimeout","onreadystatechange","onload","appendChild","proxyClass","super","_name","_messageId","_worker","_receive","_waiting","Map","_invoke","then","cb","delete","WorkerProxy","Promise","obj","set","funcName","Object","getOwnPropertyNames","Stub","finalRes","_result","_onmessage","close","poolClass","proxyInitializer","_proxyInitializer","_poolSize","_workers","_freeWorkers","_waitingCalls","_updateToSize","poolSize","_size","catch","push","shift","_step","indexOf","destroy","workerPromises","createdWorkers","all","pop","idx","splice","_moduleLoadedCallbacks","WasmHelper","isNodeJs","_importStarted","importWasmBrowser","importScriptBrowser","_importFinished","importWasmNodeJs","importScriptNodeJs","wasm","module","_adjustWasmPath","WebAssembly","xhr","XMLHttpRequest","open","responseType","wasmBinary","response","onerror","send","fs","readFileSync","buf","u","Uint8Array","toUint8Array","asm","_adjustScriptPath","moduleSettings","async","reject","onRuntimeInitialized","importScripts","_loadBrowserScript","__dirname","CryptoWorker","lib","CryptoLib","_workerAsync","startWorkerPoolForProxy","input","inputs","key","salt","iterations","block","transactionValid","timeNow","genesisHash","networkId","CryptoWorkerImpl","_superInit","doImportBrowser","out","Hash","getSize","Algorithm","ARGON2D","NodeNative","node_argon2","stackPtr","Module","stackSave","hashSize","wasmOut","stackAlloc","wasmIn","HEAPU8","buffer","_nimiq_argon2","hash","stackRestore","hashes","stackTmp","node_kdf","wasmSalt","_nimiq_kdf","blockSerialized","GenesisConfig","GENESIS_HASH","unserialize","SerialBuffer","NETWORK_ID","Block","body","transactions","_valid","valid","_verify","pow","header","interlinkHash","interlink","bodyHash","serialize","prepareForWorkerUse","globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","coeffToString","a","s","z","j","r","charCodeAt","compare","x","y","b","xc","yc","k","intCheck","min","max","Error","isArray","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","ALPHABET","alphabet","isNum","test","round","search","substring","format","rm","c0","ne","maxOrMin","method","m","normalise","sd","ni","rd","pows10","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","_isBigNumber","maximum","lt","minimum","gt","random","dp","rand","Uint32Array","copy","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","equals","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","plus","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","NumberUtils","val","Number","UINT8_MAX","UINT16_MAX","UINT32_MAX","UINT64_MAX","BufferUtils","String","fromCharCode","string","u8","TextDecoder","_ISO_8859_15_DECODER","decode","num","_BASE64_LOOKUP","end","tmp","output","_tripletToBase64","join","extraBytes","parts","len2","_base64encodeChunk","Buffer","btoa","_codePointTextDecoder","_base64fromByteArray","base64","from","atob","toBase64","BASE32_ALPHABET","NIMIQ","byte","symbol","base32","charmap","toUpperCase","forEach","char","hex","code","HEX_ALPHABET","trim","StringUtils","isHexBytes","match","viewA","viewB","byteLength","BASE64_ALPHABET","RFC4648","RFC4648_HEX","bufferOrArrayOrLength","_view","DataView","_readPos","_writePos","ArrayUtils","subarray","readPos","value","writePos","array","getUint8","setUint8","getUint16","setUint16","getUint32","setUint32","isUint64","readUint8","readUint16","readUint32","readUint64","writeUint8","writeUint16","writeUint32","writeUint64","getFloat64","setFloat64","bytes","read","toAscii","isMultibyte","fromAscii","write","view","byteOffset","padding","isUint8","MinerWorker","blockHeader","compact","minNonce","maxNonce","MinerWorkerImpl","_malloc","nonce","_nimiq_argon2_target","_free","MinerWorkerPool","_miningEnabled","_activeNonces","_block","_noncesPerRun","_observable","Observable","_shareCompact","Policy","BLOCK_TARGET_MAX","_runsPerCycle","Infinity","_cycleWait","_superUpdateToSize","multiMine","fail","node_argon2_target_async","getInstanceAsync","computeArgon2d","noncesPerRun","nonces","runsPerCycle","cycleWait","callback","on","off","shareCompact","nBits","_startMiner","map","nonceRange","_singleMiner","fire","newMin","newRange","uintarr","begin","clamp","list","indices","reverseRange","found","Assert","condition","MerkleTree","values","fnHash","_hash","_computeRoot","light","mid","left","right","leftHash","rightHash","concatTypedArrays","o","MerklePath","nodes","some","it","MerklePathNode","_nodes","leafValue","leafHash","path","_compute","containsLeaf","inner","leftLeaf","rightLeaf","root","node","serializedSize","count","leftBitsSize","leftBits","_compress","reduce","sum","every","_left","coins","SATOSHIS_PER_COIN","satoshis","blockHeight","startHeight","_supplyCacheInterval","startI","_supplyCacheMax","endI","supply","INITIAL_SUPPLY","_supplyCache","endHeight","_supplyAfter","initialSupply","_blockRewardAt","currentSupply","supplyAfter","remaining","TOTAL_SUPPLY","EMISSION_TAIL_START","EMISSION_TAIL_REWARD","EMISSION_SPEED","BLOCK_TIME","BLOCK_SIZE_MAX","DIFFICULTY_BLOCK_WINDOW","DIFFICULTY_MAX_ADJUSTMENT_FACTOR","TRANSACTION_VALIDITY_WINDOW","M","K","DELTA","NUM_BLOCKS_VERIFICATION","NUM_SNAPSHOTS_MAX","Serializable","toHex","arg","algorithm","BLAKE2B","_obj","_algorithm","blake2b","computeBlake2b","argon2d","computeSha256","SHA256","sha256","SIZE","fromBase64","fromHex","node_blake2","_nimiq_blake2","node_sha256","_nimiq_sha256","SHA512","NULL","PublicKey","privateKey","_publicKeyDerive","publicKeys","sort","_delinearizeAndAggregatePublicKeys","Address","fromHash","PeerId","publicKeysObj","publicKeysHash","_publicKeysHash","raw","_publicKeysDelinearizeAndAggregate","PrivateKey","node_ed25519_public_key_derive","pubKeyBuffer","HEAP8","privKeyBuffer","_ed25519_public_key_derive","fill","publicKey","concatenatedPublicKeys","node_ed25519_hash_public_keys","wasmInPublicKeys","_ed25519_hash_public_keys","hashedPublicKey","node_ed25519_delinearize_public_key","wasmInPublicKey","wasmInPublicKeysHash","_ed25519_delinearize_public_key","delinearizedPublicKey","node_ed25519_aggregate_delinearized_public_keys","_ed25519_aggregate_delinearized_public_keys","aggregatePublicKey","Signature","_signatureCreate","commitment","signatures","_combinePartialSignatures","_signatureVerify","combinedCommitment","partialSignatures","combinedSignature","_aggregatePartialSignatures","sigA","sigB","_scalarsAdd","PartialSignature","node_ed25519_add_scalars","wasmOutSum","wasmInA","wasmInB","_ed25519_add_scalars","node_ed25519_sign","wasmOutSignature","signatureBuffer","wasmInMessage","wasmInPubKey","wasmInPrivKey","_ed25519_sign","signature","node_ed25519_verify","wasmInSignature","_ed25519_verify","SERIALIZED_SIZE","fromUserFriendlyAddress","CCODE","_ibanCheck","fromBase32","withSpaces","toBase32","check","HEX_SIZE","CONTRACT_CREATION","Account","balance","_type","_balance","TYPE_MAP","has","transaction","transactionsCache","revert","validityStartHeight","withBalance","fee","newBalance","containsTransaction","INITIAL","isInitial","Type","BASIC","VESTING","HTLC","PrunedAccount","address","account","_address","_account","BasicAccount","SignatureProof","verifyTransaction","hasFlag","Transaction","Flag","recipientType","withIncomingTransaction","create","Contract","recipient","getContractCreationAddress","HashedTimeLockedContract","sender","hashRoot","hashCount","timeout","totalAmount","isUint32","_sender","_recipient","_hashRoot","_hashCount","_timeout","_totalAmount","hashAlgorithm","toUserFriendlyAddress","proof","ProofType","REGULAR_TRANSFER","hashDepth","preImage","compute","verify","serializeContent","EARLY_RESOLVE","TIMEOUT_RESOLVE","verifyIncomingTransaction","minCap","isSignedBy","withOutgoingTransaction","VestingContract","owner","vestingStart","vestingStepBlocks","vestingStepAmount","vestingTotalAmount","_owner","_vestingStart","_vestingStepBlocks","_vestingStepAmount","_vestingTotalAmount","getMinCap","BlockHeader","prevHash","accountsHash","height","timestamp","version","CURRENT_VERSION","isUint16","isHash","BlockUtils","isValidCompact","_version","_prevHash","_interlinkHash","_bodyHash","_accountsHash","_nBits","_height","_timestamp","_nonce","SUPPORTED_VERSIONS","includes","isProofOfWork","target","prevHeader","_pow","hard","compactToTarget","difficulty","compactToDifficulty","Version","V1","BlockInterlink","repeatBitsSize","repeatBits","lastHash","compressed","_hashes","_repeatBits","_compressed","computeRoot","BlockBody","extraData","minerAddr","prunedAccounts","_minerAddr","_extraData","_transactions","_prunedAccounts","extraDataLength","numTransactions","numPrunedAccounts","tx","acc","previousTx","compareBlockOrder","previousAcc","isToBePruned","getMerkleLeafs","addresses","transactionCount","log2","getTargetHeight","targetToCompact","difficultyToTarget","targetToDifficulty","hashToTarget","getTargetDepth","isValidTarget","headBlock","tailBlock","deltaTotalDifficulty","that","actualTime","adjustment","averageDifficulty","nextTarget","_header","_interlink","_body","time","isLight","now","blockVerify","TIMESTAMP_DRIFT_MAX","verifyProofOfWork","_verifyInterlink","isFull","_verifyBody","predecessor","isImmediateSuccessorOf","getNextInterlink","prevPow","targetHeight","blockFound","depth","HashSet","addAll","removeAll","depthDiff","commonBlock","thisInterlink","prevInterlink","isInterlinkSuccessorOf","nextVersion","thisPowDepth","getHashDepth","nextTargetDepth","numOccurrences","senderType","flags","_format","_senderType","_recipientType","_value","_fee","_networkId","_validityStartHeight","_flags","_data","_proof","FORMAT_MAP","serializedContentSize","verifyOutgoingTransaction","recCompare","senderCompare","feePerByte","flag","Format","EXTENDED","NONE","ALL","signerKey","merklePath","_publicKey","_merklePath","_signature","merkleRoot","BasicTransaction","senderPubKey","singleSig","toAddress","_signatureProof","ExtendedTransaction","dataSize","proofSize"],"mappings":"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","file":"worker.js","sourcesContent":["class Class {\n    static get scope() {\n        if (typeof exports !== 'undefined') return exports;\n        if (typeof self !== 'undefined') return self;\n        return window;\n    }\n\n    static register(cls) {\n        if (typeof exports !== 'undefined') exports[cls.name] = cls;\n    }\n}\nClass.register(Class);\n","class PlatformUtils {\n    /**\n     * @returns {boolean}\n     */\n    static isBrowser() {\n        return typeof window !== 'undefined';\n    }\n\n    /**\n     * @return {boolean}\n     */\n    static isNodeJs() {\n        return !PlatformUtils.isBrowser() && typeof process === 'object' && typeof require === 'function';\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static supportsWebRTC() {\n        let RTCPeerConnection = PlatformUtils.isBrowser() ? (window.RTCPeerConnection || window.webkitRTCPeerConnection) : null;\n        return !!RTCPeerConnection;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static isOnline() {\n        return (!PlatformUtils.isBrowser() || !('onLine' in window.navigator)) || window.navigator.onLine;\n    }\n}\nClass.register(PlatformUtils);\n","class LogNative {\n    constructor() {\n        this._global_level = Log.INFO;\n        this._tag_levels = {};\n        try {\n            if (window.localStorage) {\n                try {\n                    let c = window.localStorage.getItem('log_tag_levels');\n                    if (c && typeof c === 'string') c = JSON.parse(c);\n                    if (c && typeof c === 'object') this._tag_levels = c;\n                } catch (e) {\n                    console.warn('Failed to load log configuration from local storage.');\n                }\n            }\n        } catch (e) {\n            // ignore\n        }\n    }\n\n    isLoggable(tag, level) {\n        if (tag && this._tag_levels[tag]) {\n            return this._tag_levels[tag] <= level;\n        }\n        if (this._tag_levels['*']) {\n            return this._tag_levels['*'] <= level;\n        }\n        return this._global_level <= level;\n    }\n\n    setLoggable(tag, level) {\n        if (tag && tag.name) tag = tag.name;\n        this._tag_levels[tag] = level;\n        if (window.localStorage) {\n            window.localStorage.setItem('log_tag_levels', JSON.stringify(this._tag_levels));\n        }\n    }\n\n    msg(level, tag, args) {\n        if (tag && tag.name) tag = tag.name;\n        if (!this.isLoggable(tag, level)) return;\n        if (tag) args.unshift(tag + ':');\n        args.unshift(`[${Log.Level.toStringTag(level)} ${new Date().toTimeString().substr(0, 8)}]`);\n        if (console.error && level >= Log.ERROR) {\n            console.error.apply(console, args);\n        } else if (console.warn && level >= Log.WARNING) {\n            console.warn.apply(console, args);\n        } else if (console.info && level >= Log.INFO) {\n            console.info.apply(console, args);\n        } else if (console.debug && level >= Log.DEBUG) {\n            console.debug.apply(console, args);\n        } else if (console.trace && level <= Log.TRACE) {\n            console.trace.apply(console, args);\n        } else {\n            console.log.apply(console, args);\n        }\n    }\n}\nClass.register(LogNative);\n","class Log {\n    /**\n     * @returns {Log}\n     */\n    static get instance() {\n        if (!Log._instance) {\n            Log._instance = new Log(new LogNative());\n        }\n        return Log._instance;\n    }\n\n    /**\n     * @param {LogNative} native\n     */\n    constructor(native) {\n        /** @type {LogNative} */\n        this._native = native;\n    }\n\n    /**\n     * @param {string} tag\n     * @param {Log.Level} level\n     */\n    setLoggable(tag, level) {\n        this._native.setLoggable(tag, Log.Level.get(level));\n    }\n\n    /** @type {Log.Level} */\n    get level() {\n        return this._native._global_level;\n    }\n\n    /** @type {Log.Level} */\n    set level(l) {\n        this._native._global_level = Log.Level.get(l);\n    }\n\n    /**\n     * @param {Log.Level} level\n     * @param {string|{name:string}} tag\n     * @param {Array} args\n     */\n    msg(level, tag, args) {\n        if (this._native.isLoggable(tag, level)) {\n            for (let i = 0; i < args.length; ++i) {\n                if (typeof args[i] === 'function') {\n                    args[i] = args[i]();\n                }\n                if (typeof args[i] === 'object') {\n                    if (typeof args[i].toString === 'function') {\n                        args[i] = args[i].toString();\n                    } else if (args[i].constructor && args[i].constructor.name) {\n                        args[i] = `{Object: ${args[i].constructor.name}}`;\n                    } else {\n                        args[i] = '{Object}';\n                    }\n                }\n            }\n            this._native.msg(level, tag, args);\n        }\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static d(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.DEBUG, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static e(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.ERROR, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static i(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.INFO, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static v(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.VERBOSE, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static w(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.WARNING, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static t(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.TRACE, tag, args);\n    }\n}\n\n/**\n * @enum {number|string}\n */\nLog.Level = {\n    TRACE: 1,\n    VERBOSE: 2,\n    DEBUG: 3,\n    INFO: 4,\n    WARNING: 5,\n    ERROR: 6,\n    ASSERT: 7,\n\n    /**\n     * @param {Log.Level} level\n     * @returns {string}\n     */\n    toStringTag: function (level) {\n        switch (level) {\n            case Log.Level.TRACE:\n                return 'T';\n            case Log.Level.VERBOSE:\n                return 'V';\n            case Log.Level.DEBUG:\n                return 'D';\n            case Log.Level.INFO:\n                return 'I';\n            case Log.Level.WARNING:\n                return 'W';\n            case Log.Level.ERROR:\n                return 'E';\n            case Log.Level.ASSERT:\n                return 'A';\n            default:\n                return '*';\n        }\n    },\n\n    toString: function (level) {\n        switch (level) {\n            case Log.Level.TRACE:\n                return 'trace';\n            case Log.Level.VERBOSE:\n                return 'verbose';\n            case Log.Level.DEBUG:\n                return 'debug';\n            case Log.Level.INFO:\n                return 'info';\n            case Log.Level.WARNING:\n                return 'warn';\n            case Log.Level.ERROR:\n                return 'error';\n            case Log.Level.ASSERT:\n                return 'assert';\n            default:\n                return 'unknown';\n        }\n    },\n\n    /**\n     * @param {string|number|Log.Level} v\n     * @returns {Log.Level}\n     */\n    get: function (v) {\n        if (typeof v === 'number') return /** @type {Log.Level} */ v;\n        if (!isNaN(parseInt(v))) return /** @type {Log.Level} */ parseInt(v);\n        switch (v.toLowerCase()) {\n            case 't':\n            case 'trace':\n                return Log.Level.TRACE;\n            case 'v':\n            case 'verbose':\n                return Log.Level.VERBOSE;\n            case 'd':\n            case 'debug':\n                return Log.Level.DEBUG;\n            case 'i':\n            case 'info':\n                return Log.Level.INFO;\n            case 'w':\n            case 'warn':\n            case 'warning':\n                return Log.Level.WARNING;\n            case 'e':\n            case 'error':\n            case 'exception':\n                return Log.Level.ERROR;\n            case 'a':\n            case 'assert':\n            case 'assertion':\n                return Log.Level.ASSERT;\n        }\n        return /** @type {Log.Level} */ 0;\n    }\n};\nLog.TRACE = Log.Level.TRACE;\nLog.VERBOSE = Log.Level.VERBOSE;\nLog.DEBUG = Log.Level.DEBUG;\nLog.INFO = Log.Level.INFO;\nLog.WARNING = Log.Level.WARNING;\nLog.ERROR = Log.Level.ERROR;\nLog.ASSERT = Log.Level.ASSERT;\nLog._instance = null;\n\nLog.d.tag = (tag) => Log.d.bind(null, tag);\nLog.e.tag = (tag) => Log.e.bind(null, tag);\nLog.i.tag = (tag) => Log.i.bind(null, tag);\nLog.v.tag = (tag) => Log.v.bind(null, tag);\nLog.w.tag = (tag) => Log.w.bind(null, tag);\nLog.t.tag = (tag) => Log.t.bind(null, tag);\n\nClass.register(Log);\n","/**\n * @interface\n */\nclass IWorker {\n    static async createProxy(clazz, name, worker) {\n        return new (IWorker.Proxy(clazz))(worker, name);\n    }\n\n    static async startWorkerForProxy(clazz, name, workerScript) {\n        if (!IWorker._workersSupported) {\n            await IWorker._workerImplementation[clazz.name].init(name);\n            return IWorker._workerImplementation[clazz.name];\n        } else {\n            if (!workerScript) {\n                workerScript = `${Nimiq._path}worker.js`;\n            }\n            return IWorker.createProxy(clazz, name, new Worker(window.URL.createObjectURL(new Blob([`Nimiq = {_path: '${Nimiq._path}'}; importScripts('${workerScript.replace(/'/g, '')}');`]))));\n        }\n    }\n\n    static async startWorkerPoolForProxy(clazz, name, size, workerScript) {\n        return (new (IWorker.Pool(clazz))((name) => IWorker.startWorkerForProxy(clazz, name, workerScript), name, size)).start();\n    }\n\n    static async stubBaseOnMessage(msg) {\n        try {\n            if (msg.data.command === 'init') {\n                if (IWorker._workerImplementation[msg.data.args[0]]) {\n                    const res = await IWorker._workerImplementation[msg.data.args[0]].init(msg.data.args[1]);\n                    self.postMessage({status: 'OK', result: res, id: msg.data.id});\n                } else {\n                    self.postMessage({status: 'error', result: 'Unknown worker!', id: msg.data.id});\n                }\n            } else {\n                self.postMessage({status: 'error', result: 'Worker not yet initialized!', id: msg.data.id});\n            }\n        } catch (e) {\n            self.postMessage({status: 'error', result: e, id: msg.data.id});\n        }\n    }\n\n    static get _workersSupported() {\n        return typeof Worker !== 'undefined';\n    }\n\n    static get areWorkersAsync() {\n        return IWorker._workersSupported;\n    }\n\n    static get _insideWebWorker() {\n        return typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n    }\n\n    static get _global() {\n        return typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : null;\n    }\n\n    static prepareForWorkerUse(baseClazz, impl) {\n        if (IWorker._insideWebWorker) {\n            // Only inside WebWorker\n            self.onmessage = IWorker.stubBaseOnMessage;\n        }\n        IWorker._workerImplementation = IWorker._workerImplementation || {};\n        IWorker._workerImplementation[baseClazz.name] = impl;\n    }\n\n    static _loadBrowserScript(url, resolve) {\n        // Adding the script tag to the head as suggested before\n        const head = document.getElementsByTagName('head')[0];\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n\n        // Then bind the event to the callback function.\n        // There are several events for cross browser compatibility.\n        // These events might occur before processing, so delay them a bit.\n        const ret = () => window.setTimeout(resolve, 100);\n        script.onreadystatechange = ret;\n        script.onload = ret;\n\n        // Fire the loading\n        head.appendChild(script);\n    }\n\n    static Proxy(clazz) {\n        const proxyClass = class extends clazz {\n            /**\n             * @param {Worker} worker\n             * @param {string} [name]\n             */\n            constructor(worker, name) {\n                super();\n                this._name = name;\n                this._messageId = 0;\n                this._worker = worker;\n                this._worker.onmessage = this._receive.bind(this);\n                /** @type {Map.<number,{resolve:Function,error:Function}>} */\n                this._waiting = new Map();\n                return this._invoke('init', [clazz.name, name]).then(() => { return this; });\n            }\n\n            _receive(msg) {\n                const cb = this._waiting.get(msg.data.id);\n                if (!cb) {\n                    Log.w(WorkerProxy, 'Unknown reply', msg);\n                } else {\n                    this._waiting.delete(msg.data.id);\n                    if (msg.data.status === 'OK') {\n                        cb.resolve(msg.data.result);\n                    } else if (msg.data.status === 'error') {\n                        cb.error(msg.data.result);\n                    }\n                }\n            }\n\n            /**\n             * @param {string} command\n             * @param {object[]} [args]\n             * @returns {Promise}\n             * @private\n             */\n            _invoke(command, args = []) {\n                return new Promise((resolve, error) => {\n                    const obj = {command: command, args: args, id: this._messageId++};\n                    this._waiting.set(obj.id, {resolve, error});\n                    this._worker.postMessage(obj);\n                });\n            }\n\n            destroy() {\n                return this._invoke('destroy');\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                proxyClass.prototype[funcName] = function (...args) {\n                    return this._invoke(funcName, args);\n                };\n            }\n        }\n        return proxyClass;\n    }\n\n    /**\n     * @param {object} clazz\n     * @return {Stub}\n     * @constructor\n     */\n    static Stub(clazz) {\n        const Stub = class extends clazz {\n            constructor() {\n                super();\n            }\n\n            _result(msg, status, result) {\n                self.postMessage({status, result, id: msg.data.id});\n            }\n\n            _onmessage(msg) {\n                try {\n                    const res = this._invoke(msg.data.command, msg.data.args);\n                    if (res instanceof Promise) {\n                        res.then((finalRes) => { this._result(msg, 'OK', finalRes); });\n                    } else {\n                        this._result(msg, 'OK', res);\n                    }\n                } catch (e) {\n                    this._result(msg, 'error', e.message || e);\n                }\n            }\n\n            init(name) {\n                this._name = name;\n                if (IWorker._insideWebWorker) {\n                    self.name = name;\n                    self.onmessage = (msg) => this._onmessage(msg);\n                }\n            }\n\n            _invoke(command, args) {\n                return this[command].apply(this, args);\n            }\n\n            destroy() {\n                if (IWorker._insideWebWorker) {\n                    self.close();\n                }\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                Stub.prototype[funcName] = function () {\n                    throw `Not implemented in IWorker Stub: ${funcName}`;\n                };\n            }\n        }\n        return Stub;\n    }\n\n    static Pool(clazz) {\n        const poolClass = class extends clazz {\n            /**\n             *\n             * @param {function(string):Promise} proxyInitializer\n             * @param {string} [name]\n             * @param {number} [size] Number of workers in this pool.\n             */\n            constructor(proxyInitializer, name = 'pool', size = 1) {\n                super();\n                /** @type {function(string):Promise} */\n                this._proxyInitializer = proxyInitializer;\n                /** @type {string} */\n                this._name = name;\n                /** @type {number} */\n                this._poolSize = size;\n                /** @type {Array} */\n                this._workers = [];\n                /** @type {Array} */\n                this._freeWorkers = [];\n                /** @type {Array.<{name:string, args:Array, resolve:function, error:function}>} */\n                this._waitingCalls = [];\n            }\n\n            async start() {\n                await this._updateToSize();\n\n                return this;\n            }\n\n            get poolSize() {\n                return this._poolSize;\n            }\n\n            set poolSize(_size) {\n                this._poolSize = _size;\n                this._updateToSize().catch(Log.w.tag(IWorker));\n            }\n\n            destroy() {\n                this._poolSize = 0;\n                return this._updateToSize();\n            }\n\n            /**\n             * @param {string} name Name of the function to call on a worker\n             * @param {Array} args Arguments to pass to the function\n             * @returns {Promise}\n             */\n            _invoke(name, args) {\n                if (IWorker._workersSupported) {\n                    return new Promise((resolve, error) => {\n                        this._waitingCalls.push({name, args, resolve, error});\n                        const worker = this._freeWorkers.shift();\n                        if (worker) {\n                            this._step(worker).catch(Log.w.tag(IWorker));\n                        }\n                    });\n                } else {\n                    return this._workers[0][name].apply(this._workers[0], args);\n                }\n            }\n\n            /**\n             * @param worker\n             * @returns {Promise.<void>}\n             * @private\n             */\n            async _step(worker) {\n                let call = this._waitingCalls.shift();\n                while (call) {\n                    try {\n                        // eslint-disable-next-line no-await-in-loop\n                        call.resolve(await worker[call.name].apply(worker, call.args));\n                    } catch (e) {\n                        call.error(e);\n                    }\n                    if (this._workers.indexOf(worker) === -1) {\n                        worker.destroy();\n                        return;\n                    }\n                    call = this._waitingCalls.shift();\n                }\n                this._freeWorkers.push(worker);\n            }\n\n            async _updateToSize() {\n                if (typeof Worker === 'undefined' && this._poolSize > 1) {\n                    Log.d(IWorker, 'Pool of size larger than 1 requires WebWorker support.');\n                    this._poolSize = 1;\n                }\n\n                const workerPromises = [];\n                while (this._workers.length + workerPromises.length < this._poolSize) {\n                    workerPromises.push(this._proxyInitializer(`${this._name}#${this._workers.length + workerPromises.length}`));\n                }\n                const createdWorkers = await Promise.all(workerPromises);\n                for (const worker of createdWorkers) {\n                    this._workers.push(worker);\n                    this._step(worker).catch(Log.w.tag(IWorker));\n                }\n\n                while (this._workers.length > this._poolSize) {\n                    const worker = this._freeWorkers.shift() || this._workers.pop();\n                    const idx = this._workers.indexOf(worker);\n                    if (idx >= 0) {\n                        // This was a free worker, also remove it from the worker list and destroy it now.\n                        this._workers.splice(idx, 1);\n                        worker.destroy();\n                    }\n                }\n                return this;\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                poolClass.prototype[funcName] = function (...args) {\n                    return this._invoke(funcName, args);\n                };\n            }\n        }\n        return poolClass;\n    }\n}\n\nIWorker._moduleLoadedCallbacks = {};\nIWorker._workerImplementation = {};\nClass.register(IWorker);\n","class WasmHelper {\n\n    static async doImportBrowser() {\n        if (PlatformUtils.isNodeJs()) return;\n        if (WasmHelper._importStarted) {\n            Log.e(WasmHelper, 'doImportBrowser invoked twice');\n            return;\n        }\n        WasmHelper._importStarted = true;\n        if (await WasmHelper.importWasmBrowser('worker-wasm.wasm')) {\n            await WasmHelper.importScriptBrowser('worker-wasm.js');\n        } else {\n            await WasmHelper.importScriptBrowser('worker-js.js');\n        }\n        WasmHelper._importFinished = true;\n    }\n\n    static doImportNodeJs() {\n        if (!PlatformUtils.isNodeJs()) return;\n        if (WasmHelper.importWasmNodeJs('worker-wasm.wasm')) {\n            WasmHelper.importScriptNodeJs('worker-wasm.js');\n        } else {\n            WasmHelper.importScriptNodeJs('worker-js.js');\n        }\n    }\n\n    /**\n     * @param {string} wasm\n     * @param {string} module\n     * @returns {Promise.<boolean>}\n     */\n    static importWasmBrowser(wasm, module = 'Module') {\n        wasm = WasmHelper._adjustWasmPath(wasm);\n        if (!WasmHelper._global.WebAssembly) {\n            Log.w(WasmHelper, 'No support for WebAssembly available.');\n            return Promise.resolve(false);\n        }\n\n        return new Promise((resolve) => {\n            try {\n                const xhr = new XMLHttpRequest();\n                xhr.open('GET', wasm, true);\n                xhr.responseType = 'arraybuffer';\n                xhr.onload = function () {\n                    WasmHelper._global[module] = WasmHelper._global[module] || {};\n                    WasmHelper._global[module].wasmBinary = xhr.response;\n                    resolve(true);\n                };\n                xhr.onerror = function () {\n                    Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}`);\n                    resolve(false);\n                };\n                xhr.send(null);\n            } catch (e) {\n                Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}`);\n                resolve(false);\n            }\n        });\n    }\n\n    static importWasmNodeJs(wasm, module = 'Module') {\n        wasm = WasmHelper._adjustWasmPath(wasm);\n        if (!WasmHelper._global.WebAssembly) {\n            Log.w(WasmHelper, 'No support for WebAssembly available.');\n            return false;\n        }\n\n        const toUint8Array = function (buf) {\n            const u = new Uint8Array(buf.length);\n            for (let i = 0; i < buf.length; ++i) {\n                u[i] = buf[i];\n            }\n            return u;\n        };\n        const fs = require('fs');\n        try {\n            const data = fs.readFileSync(wasm);\n            WasmHelper._global[module] = WasmHelper._global[module] || {};\n            WasmHelper._global[module].wasmBinary = toUint8Array(data);\n            return true;\n        } catch (e) {\n            Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}: ${e}`);\n            return false;\n        }\n    }\n\n    static importScriptBrowser(script, module = 'Module') {\n        if (module && WasmHelper._global[module] && WasmHelper._global[module].asm) return false;\n        script = WasmHelper._adjustScriptPath(script);\n\n        const moduleSettings = WasmHelper._global[module] || {};\n        return new Promise(async (resolve, reject) => {\n            if (module) {\n                moduleSettings.onRuntimeInitialized = () => resolve(true);\n            }\n            if (typeof importScripts === 'function') {\n                await new Promise((resolve) => {\n                    WasmHelper._moduleLoadedCallbacks[module] = resolve;\n                    importScripts(script);\n                });\n                WasmHelper._global[module] = WasmHelper._global[module](moduleSettings);\n                if (!module) resolve(true);\n            } else if (typeof window === 'object') {\n                await new Promise((resolve) => {\n                    WasmHelper._moduleLoadedCallbacks[module] = resolve;\n                    WasmHelper._loadBrowserScript(script);\n                });\n                WasmHelper._global[module] = WasmHelper._global[module](moduleSettings);\n                if (!module) resolve(true);\n            } else if (typeof require === 'function') {\n                WasmHelper._global[module] = require(script)(moduleSettings);\n                if (!module) resolve(true);\n            } else {\n                reject('No way to load scripts.');\n            }\n        });\n    }\n\n    static importScriptNodeJs(script, module = 'Module') {\n        if (module && WasmHelper._global[module] && WasmHelper._global[module].asm) return false;\n        script = WasmHelper._adjustScriptPath(script);\n\n        const moduleSettings = WasmHelper._global[module] || {};\n\n        if (typeof require === 'function') {\n            WasmHelper._global[module] = require(script)(moduleSettings);\n            if (!module) return true;\n        }\n        return false;\n    }\n\n    static fireModuleLoaded(module = 'Module') {\n        if (typeof WasmHelper._moduleLoadedCallbacks[module] === 'function') {\n            WasmHelper._moduleLoadedCallbacks[module]();\n            WasmHelper._moduleLoadedCallbacks[module] = null;\n        }\n    }\n\n    static _loadBrowserScript(url) {\n        const head = document.getElementsByTagName('head')[0];\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n        head.appendChild(script);\n    }\n\n    static _adjustWasmPath(wasm) {\n        if (typeof Nimiq !== 'undefined' && Nimiq._path) wasm = `${Nimiq._path}${wasm}`;\n        if (typeof __dirname === 'string' && wasm.indexOf('/') === -1) wasm = `${__dirname}/${wasm}`;\n        return wasm;\n    }\n\n    static _adjustScriptPath(script) {\n        if (typeof Nimiq !== 'undefined' && Nimiq._path) script = `${Nimiq._path}${script}`;\n        if (typeof __dirname === 'string' && script.indexOf('/') === -1) script = `${__dirname}/${script}`;\n        return script;\n    }\n\n    static get _global() {\n        return typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : null;\n    }\n}\nWasmHelper._moduleLoadedCallbacks = {};\n\nClass.register(WasmHelper);\n\n","/**\n * @interface\n */\nclass CryptoWorker {\n    static get lib() { return CryptoLib.instance; }\n\n    /**\n     * @returns {Promise.<CryptoWorker>}\n     */\n    static async getInstanceAsync() {\n        if (!CryptoWorker._workerAsync) {\n            CryptoWorker._workerAsync = await IWorker.startWorkerPoolForProxy(CryptoWorker, 'crypto', 4);\n        }\n        return CryptoWorker._workerAsync;\n    }\n    /**\n     * @param {Uint8Array} input\n     * @returns {Promise.<Uint8Array>}\n     */\n    async computeArgon2d(input) {}\n\n    /**\n     * @param {Array.<Uint8Array>} inputs\n     * @returns {Promise.<Array.<Uint8Array>>}\n     */\n    async computeArgon2dBatch(inputs) {}\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @returns {Promise.<Uint8Array>}\n     */\n    async kdf(key, salt, iterations) {}\n\n    /**\n     * @param {Uint8Array} block\n     * @param {Array.<bool>} transactionValid\n     * @param {number} timeNow\n     * @param {Uint8Array} genesisHash\n     * @param {number} networkId\n     * @returns {Promise.<{valid: boolean, pow: SerialBuffer, interlinkHash: SerialBuffer, bodyHash: SerialBuffer}>}\n     */\n    async blockVerify(block, transactionValid, timeNow, genesisHash, networkId) {}\n}\n/** @type {CryptoWorker} */\nCryptoWorker._workerAsync = null;\n\nClass.register(CryptoWorker);\n","class CryptoWorkerImpl extends IWorker.Stub(CryptoWorker) {\n    constructor() {\n        super();\n        // FIXME: This is needed for Babel to work correctly. Can be removed as soon as we updated to Babel v7.\n        this._superInit = super.init;\n    }\n\n    async init(name) {\n        await this._superInit.call(this, name);\n        await WasmHelper.doImportBrowser();\n        CryptoWorker._workerAsync = this;\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    computeArgon2d(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.ARGON2D));\n            const res = NodeNative.node_argon2(out, new Uint8Array(input), 512);\n            if (res !== 0) {\n                throw res;\n            }\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.ARGON2D);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                const res = Module._nimiq_argon2(wasmOut, wasmIn, input.length, 512);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} inputs\n     * @returns {Array.<Uint8Array>}\n     */\n    computeArgon2dBatch(inputs) {\n        const hashes = [];\n        if (PlatformUtils.isNodeJs()) {\n            for(const input of inputs) {\n                const out = new Uint8Array(Hash.getSize(Hash.Algorithm.ARGON2D));\n                const res = NodeNative.node_argon2(out, new Uint8Array(input), 512);\n                if (res !== 0) {\n                    throw res;\n                }\n                hashes.push(out);\n            }\n            return hashes;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.ARGON2D);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const stackTmp = Module.stackSave();\n                for (const input of inputs) {\n                    Module.stackRestore(stackTmp);\n                    const wasmIn = Module.stackAlloc(input.length);\n                    new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                    const res = Module._nimiq_argon2(wasmOut, wasmIn, input.length, 512);\n                    if (res !== 0) {\n                        throw res;\n                    }\n                    const hash = new Uint8Array(hashSize);\n                    hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                    hashes.push(hash);\n                }\n                return hashes;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @returns {Uint8Array}\n     */\n    kdf(key, salt, iterations) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.ARGON2D));\n            const res = NodeNative.node_kdf(out, new Uint8Array(key), new Uint8Array(salt), 512, iterations);\n            if (res !== 0) {\n                throw res;\n            }\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.ARGON2D);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(key.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, key.length).set(key);\n                const wasmSalt = Module.stackAlloc(salt.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmSalt, salt.length).set(salt);\n                const res = Module._nimiq_kdf(wasmOut, wasmIn, key.length, wasmSalt, salt.length, 512, iterations);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} blockSerialized\n     * @param {Array.<boolean|undefined>} transactionValid\n     * @param {number} timeNow\n     * @param {Uint8Array} genesisHash\n     * @param {number} networkId\n     * @returns {Promise.<{valid: boolean, pow: SerialBuffer, interlinkHash: SerialBuffer, bodyHash: SerialBuffer}>}\n     */\n    async blockVerify(blockSerialized, transactionValid, timeNow, genesisHash, networkId) {\n        // The worker only uses a stub genesis config.\n        GenesisConfig = {\n            GENESIS_HASH: Hash.unserialize(new SerialBuffer(genesisHash)),\n            NETWORK_ID: networkId\n        };\n\n        const block = Block.unserialize(new SerialBuffer(blockSerialized));\n        for (let i = 0; i < transactionValid.length; i++) {\n            block.body.transactions[i]._valid = transactionValid[i];\n        }\n\n        const valid = await block._verify(timeNow);\n        const pow = await block.header.pow();\n        const interlinkHash = block.interlink.hash();\n        const bodyHash = block.body.hash();\n        return { valid: valid, pow: pow.serialize(), interlinkHash: interlinkHash.serialize(), bodyHash: bodyHash.serialize() };\n    }\n}\n\nIWorker.prepareForWorkerUse(CryptoWorker, new CryptoWorkerImpl());\n",";(function (globalObject) {\n    'use strict';\n\n    /*\n     *      bignumber.js v7.0.1\n     *      A JavaScript library for arbitrary-precision arithmetic.\n     *      https://github.com/MikeMcl/bignumber.js\n     *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n     *      MIT Licensed.\n     *\n     *      BigNumber.prototype methods     |  BigNumber methods\n     *                                      |\n     *      absoluteValue            abs    |  clone\n     *      comparedTo                      |  config               set\n     *      decimalPlaces            dp     |      DECIMAL_PLACES\n     *      dividedBy                div    |      ROUNDING_MODE\n     *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\n     *      exponentiatedBy          pow    |      RANGE\n     *      integerValue                    |      CRYPTO\n     *      isEqualTo                eq     |      MODULO_MODE\n     *      isFinite                        |      POW_PRECISION\n     *      isGreaterThan            gt     |      FORMAT\n     *      isGreaterThanOrEqualTo   gte    |      ALPHABET\n     *      isInteger                       |  isBigNumber\n     *      isLessThan               lt     |  maximum              max\n     *      isLessThanOrEqualTo      lte    |  minimum              min\n     *      isNaN                           |  random\n     *      isNegative                      |\n     *      isPositive                      |\n     *      isZero                          |\n     *      minus                           |\n     *      modulo                   mod    |\n     *      multipliedBy             times  |\n     *      negated                         |\n     *      plus                            |\n     *      precision                sd     |\n     *      shiftedBy                       |\n     *      squareRoot               sqrt   |\n     *      toExponential                   |\n     *      toFixed                         |\n     *      toFormat                        |\n     *      toFraction                      |\n     *      toJSON                          |\n     *      toNumber                        |\n     *      toPrecision                     |\n     *      toString                        |\n     *      valueOf                         |\n     *\n     */\n\n\n    var BigNumber,\n        isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n\n        mathceil = Math.ceil,\n        mathfloor = Math.floor,\n\n        bignumberError = '[BigNumber Error] ',\n        tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n\n        BASE = 1e14,\n        LOG_BASE = 14,\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n        SQRT_BASE = 1e7,\n\n        // EDITABLE\n        // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n        // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n        MAX = 1E9;                                   // 0 to MAX_INT32\n\n\n    /*\n     * Create and return a BigNumber constructor.\n     */\n    function clone(configObject) {\n        var div, convertBase, parseNumeric,\n            P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\n            ONE = new BigNumber(1),\n\n\n            //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n\n\n            // The default values below must be integers within the inclusive ranges stated.\n            // The values can also be changed at run-time using BigNumber.set.\n\n            // The maximum number of decimal places for operations involving division.\n            DECIMAL_PLACES = 20,                     // 0 to MAX\n\n            // The rounding mode used when rounding to the above decimal places, and when using\n            // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n            // UP         0 Away from zero.\n            // DOWN       1 Towards zero.\n            // CEIL       2 Towards +Infinity.\n            // FLOOR      3 Towards -Infinity.\n            // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n            // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n            // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n            // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n            // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n            ROUNDING_MODE = 4,                       // 0 to 8\n\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n            // The exponent value at and beneath which toString returns exponential notation.\n            // Number type: -7\n            TO_EXP_NEG = -7,                         // 0 to -MAX\n\n            // The exponent value at and above which toString returns exponential notation.\n            // Number type: 21\n            TO_EXP_POS = 21,                         // 0 to MAX\n\n            // RANGE : [MIN_EXP, MAX_EXP]\n\n            // The minimum exponent value, beneath which underflow to zero occurs.\n            // Number type: -324  (5e-324)\n            MIN_EXP = -1e7,                          // -1 to -MAX\n\n            // The maximum exponent value, above which overflow to Infinity occurs.\n            // Number type:  308  (1.7976931348623157e+308)\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n            MAX_EXP = 1e7,                           // 1 to MAX\n\n            // Whether to use cryptographically-secure random number generation, if available.\n            CRYPTO = false,                          // true or false\n\n            // The modulo mode used when calculating the modulus: a mod n.\n            // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n            // The remainder (r) is calculated as: r = a - n * q.\n            //\n            // UP        0 The remainder is positive if the dividend is negative, else is negative.\n            // DOWN      1 The remainder has the same sign as the dividend.\n            //             This modulo mode is commonly known as 'truncated division' and is\n            //             equivalent to (a % n) in JavaScript.\n            // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n            // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n            // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n            //             The remainder is always positive.\n            //\n            // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n            // modes are commonly used for the modulus operation.\n            // Although the other rounding modes can also be used, they may not give useful results.\n            MODULO_MODE = 1,                         // 0 to 9\n\n            // The maximum number of significant digits of the result of the exponentiatedBy operation.\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\n            POW_PRECISION = 0,                    // 0 to MAX\n\n            // The format specification used by the BigNumber.prototype.toFormat method.\n            FORMAT = {\n                decimalSeparator: '.',\n                groupSeparator: ',',\n                groupSize: 3,\n                secondaryGroupSize: 0,\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\n                fractionGroupSize: 0\n            },\n\n            // The alphabet used for base conversion.\n            // It must be at least 2 characters long, with no '.' or repeated character.\n            // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n            ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\n\n\n        //------------------------------------------------------------------------------------------\n\n\n        // CONSTRUCTOR\n\n\n        /*\n         * The BigNumber constructor and exported function.\n         * Create and return a new instance of a BigNumber object.\n         *\n         * n {number|string|BigNumber} A numeric value.\n         * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\n         */\n        function BigNumber(n, b) {\n            var alphabet, c, e, i, isNum, len, str,\n                x = this;\n\n            // Enable constructor usage without new.\n            if (!(x instanceof BigNumber)) {\n\n                // Don't throw on constructor call without new (#81).\n                // '[BigNumber Error] Constructor call without new: {n}'\n                //throw Error(bignumberError + ' Constructor call without new: ' + n);\n                return new BigNumber(n, b);\n            }\n\n            if (b == null) {\n\n                // Duplicate.\n                if (n instanceof BigNumber) {\n                    x.s = n.s;\n                    x.e = n.e;\n                    x.c = (n = n.c) ? n.slice() : n;\n                    return;\n                }\n\n                isNum = typeof n == 'number';\n\n                if (isNum && n * 0 == 0) {\n\n                    // Use `1 / n` to handle minus zero also.\n                    x.s = 1 / n < 0 ? (n = -n, -1) : 1;\n\n                    // Faster path for integers.\n                    if (n === ~~n) {\n                        for (e = 0, i = n; i >= 10; i /= 10, e++);\n                        x.e = e;\n                        x.c = [n];\n                        return;\n                    }\n\n                    str = n + '';\n                } else {\n                    if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);\n                    x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n                }\n\n            } else {\n\n                // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n                intCheck(b, 2, ALPHABET.length, 'Base');\n                str = n + '';\n\n                // Allow exponential notation to be used with base 10 argument, while\n                // also rounding to DECIMAL_PLACES as with other bases.\n                if (b == 10) {\n                    x = new BigNumber(n instanceof BigNumber ? n : str);\n                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n                }\n\n                isNum = typeof n == 'number';\n\n                if (isNum) {\n\n                    // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n                    if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\n\n                    x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\n\n                    // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n                    if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n                        throw Error\n                        (tooManyDigits + n);\n                    }\n\n                    // Prevent later check for length on converted number.\n                    isNum = false;\n                } else {\n                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n\n                    // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n                    if (b > 10 && b < 37) str = str.toLowerCase();\n                }\n\n                alphabet = ALPHABET.slice(0, b);\n                e = i = 0;\n\n                // Check that str is a valid base b number.\n                // Don't use RegExp so alphabet can contain special characters.\n                for (len = str.length; i < len; i++) {\n                    if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n                        if (c == '.') {\n\n                            // If '.' is not the first character and it has not be found before.\n                            if (i > e) {\n                                e = len;\n                                continue;\n                            }\n                        }\n\n                        return parseNumeric(x, n + '', isNum, b);\n                    }\n                }\n\n                str = convertBase(str, b, 10, x.s);\n            }\n\n            // Decimal point?\n            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n            // Exponential form?\n            if ((i = str.search(/e/i)) > 0) {\n\n                // Determine exponent.\n                if (e < 0) e = i;\n                e += +str.slice(i + 1);\n                str = str.substring(0, i);\n            } else if (e < 0) {\n\n                // Integer.\n                e = str.length;\n            }\n\n            // Determine leading zeros.\n            for (i = 0; str.charCodeAt(i) === 48; i++);\n\n            // Determine trailing zeros.\n            for (len = str.length; str.charCodeAt(--len) === 48;);\n\n            str = str.slice(i, ++len);\n\n            if (str) {\n                len -= i;\n\n                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n                if (isNum && BigNumber.DEBUG &&\n                    len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\n                    throw Error\n                    (tooManyDigits + (x.s * n));\n                }\n\n                e = e - i - 1;\n\n                // Overflow?\n                if (e > MAX_EXP) {\n\n                    // Infinity.\n                    x.c = x.e = null;\n\n                    // Underflow?\n                } else if (e < MIN_EXP) {\n\n                    // Zero.\n                    x.c = [x.e = 0];\n                } else {\n                    x.e = e;\n                    x.c = [];\n\n                    // Transform base\n\n                    // e is the base 10 exponent.\n                    // i is where to slice str to get the first element of the coefficient array.\n                    i = (e + 1) % LOG_BASE;\n                    if (e < 0) i += LOG_BASE;\n\n                    if (i < len) {\n                        if (i) x.c.push(+str.slice(0, i));\n\n                        for (len -= LOG_BASE; i < len;) {\n                            x.c.push(+str.slice(i, i += LOG_BASE));\n                        }\n\n                        str = str.slice(i);\n                        i = LOG_BASE - str.length;\n                    } else {\n                        i -= len;\n                    }\n\n                    for (; i--; str += '0');\n                    x.c.push(+str);\n                }\n            } else {\n\n                // Zero.\n                x.c = [x.e = 0];\n            }\n        }\n\n\n        // CONSTRUCTOR PROPERTIES\n\n\n        BigNumber.clone = clone;\n\n        BigNumber.ROUND_UP = 0;\n        BigNumber.ROUND_DOWN = 1;\n        BigNumber.ROUND_CEIL = 2;\n        BigNumber.ROUND_FLOOR = 3;\n        BigNumber.ROUND_HALF_UP = 4;\n        BigNumber.ROUND_HALF_DOWN = 5;\n        BigNumber.ROUND_HALF_EVEN = 6;\n        BigNumber.ROUND_HALF_CEIL = 7;\n        BigNumber.ROUND_HALF_FLOOR = 8;\n        BigNumber.EUCLID = 9;\n\n\n        /*\n         * Configure infrequently-changing library-wide settings.\n         *\n         * Accept an object with the following optional properties (if the value of a property is\n         * a number, it must be an integer within the inclusive range stated):\n         *\n         *   DECIMAL_PLACES   {number}           0 to MAX\n         *   ROUNDING_MODE    {number}           0 to 8\n         *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\n         *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\n         *   CRYPTO           {boolean}          true or false\n         *   MODULO_MODE      {number}           0 to 9\n         *   POW_PRECISION       {number}           0 to MAX\n         *   ALPHABET         {string}           A string of two or more unique characters, and not\n         *                                       containing '.'. The empty string, null or undefined\n         *                                       resets the alphabet to its default value.\n         *   FORMAT           {object}           An object with some of the following properties:\n         *      decimalSeparator       {string}\n         *      groupSeparator         {string}\n         *      groupSize              {number}\n         *      secondaryGroupSize     {number}\n         *      fractionGroupSeparator {string}\n         *      fractionGroupSize      {number}\n         *\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\n         *\n         * E.g.\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\n         *\n         * Ignore properties/parameters set to null or undefined, except for ALPHABET.\n         *\n         * Return an object with the properties current values.\n         */\n        BigNumber.config = BigNumber.set = function (obj) {\n            var p, v;\n\n            if (obj != null) {\n\n                if (typeof obj == 'object') {\n\n                    // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n                    // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n                        v = obj[p];\n                        intCheck(v, 0, MAX, p);\n                        DECIMAL_PLACES = v;\n                    }\n\n                    // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n                    // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n                        v = obj[p];\n                        intCheck(v, 0, 8, p);\n                        ROUNDING_MODE = v;\n                    }\n\n                    // EXPONENTIAL_AT {number|number[]}\n                    // Integer, -MAX to MAX inclusive or\n                    // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n                    // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n                        v = obj[p];\n                        if (isArray(v)) {\n                            intCheck(v[0], -MAX, 0, p);\n                            intCheck(v[1], 0, MAX, p);\n                            TO_EXP_NEG = v[0];\n                            TO_EXP_POS = v[1];\n                        } else {\n                            intCheck(v, -MAX, MAX, p);\n                            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n                        }\n                    }\n\n                    // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n                    // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n                    // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n                    if (obj.hasOwnProperty(p = 'RANGE')) {\n                        v = obj[p];\n                        if (isArray(v)) {\n                            intCheck(v[0], -MAX, -1, p);\n                            intCheck(v[1], 1, MAX, p);\n                            MIN_EXP = v[0];\n                            MAX_EXP = v[1];\n                        } else {\n                            intCheck(v, -MAX, MAX, p);\n                            if (v) {\n                                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n                            } else {\n                                throw Error\n                                (bignumberError + p + ' cannot be zero: ' + v);\n                            }\n                        }\n                    }\n\n                    // CRYPTO {boolean} true or false.\n                    // '[BigNumber Error] CRYPTO not true or false: {v}'\n                    // '[BigNumber Error] crypto unavailable'\n                    if (obj.hasOwnProperty(p = 'CRYPTO')) {\n                        v = obj[p];\n                        if (v === !!v) {\n                            if (v) {\n                                if (typeof crypto != 'undefined' && crypto &&\n                                    (crypto.getRandomValues || crypto.randomBytes)) {\n                                    CRYPTO = v;\n                                } else {\n                                    CRYPTO = !v;\n                                    throw Error\n                                    (bignumberError + 'crypto unavailable');\n                                }\n                            } else {\n                                CRYPTO = v;\n                            }\n                        } else {\n                            throw Error\n                            (bignumberError + p + ' not true or false: ' + v);\n                        }\n                    }\n\n                    // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n                    // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n                        v = obj[p];\n                        intCheck(v, 0, 9, p);\n                        MODULO_MODE = v;\n                    }\n\n                    // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n                    // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n                        v = obj[p];\n                        intCheck(v, 0, MAX, p);\n                        POW_PRECISION = v;\n                    }\n\n                    // FORMAT {object}\n                    // '[BigNumber Error] FORMAT not an object: {v}'\n                    if (obj.hasOwnProperty(p = 'FORMAT')) {\n                        v = obj[p];\n                        if (typeof v == 'object') FORMAT = v;\n                        else throw Error\n                        (bignumberError + p + ' not an object: ' + v);\n                    }\n\n                    // ALPHABET {string}\n                    // '[BigNumber Error] ALPHABET invalid: {v}'\n                    if (obj.hasOwnProperty(p = 'ALPHABET')) {\n                        v = obj[p];\n\n                        // Disallow if only one character, or contains '.' or a repeated character.\n                        if (typeof v == 'string' && !/^.$|\\.|(.).*\\1/.test(v)) {\n                            ALPHABET = v;\n                        } else {\n                            throw Error\n                            (bignumberError + p + ' invalid: ' + v);\n                        }\n                    }\n\n                } else {\n\n                    // '[BigNumber Error] Object expected: {v}'\n                    throw Error\n                    (bignumberError + 'Object expected: ' + obj);\n                }\n            }\n\n            return {\n                DECIMAL_PLACES: DECIMAL_PLACES,\n                ROUNDING_MODE: ROUNDING_MODE,\n                EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n                RANGE: [MIN_EXP, MAX_EXP],\n                CRYPTO: CRYPTO,\n                MODULO_MODE: MODULO_MODE,\n                POW_PRECISION: POW_PRECISION,\n                FORMAT: FORMAT,\n                ALPHABET: ALPHABET\n            };\n        };\n\n\n        /*\n         * Return true if v is a BigNumber instance, otherwise return false.\n         *\n         * v {any}\n         */\n        BigNumber.isBigNumber = function (v) {\n            return v instanceof BigNumber || v && v._isBigNumber === true || false;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the maximum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.maximum = BigNumber.max = function () {\n            return maxOrMin(arguments, P.lt);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the minimum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.minimum = BigNumber.min = function () {\n            return maxOrMin(arguments, P.gt);\n        };\n\n\n        /*\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\n         * zeros are produced).\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\n         * '[BigNumber Error] crypto unavailable'\n         */\n        BigNumber.random = (function () {\n            var pow2_53 = 0x20000000000000;\n\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n            // Check if Math.random() produces more than 32 bits of randomness.\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\n                ? function () { return mathfloor(Math.random() * pow2_53); }\n                : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\n                    (Math.random() * 0x800000 | 0); };\n\n            return function (dp) {\n                var a, b, e, k, v,\n                    i = 0,\n                    c = [],\n                    rand = new BigNumber(ONE);\n\n                if (dp == null) dp = DECIMAL_PLACES;\n                else intCheck(dp, 0, MAX);\n\n                k = mathceil(dp / LOG_BASE);\n\n                if (CRYPTO) {\n\n                    // Browsers supporting crypto.getRandomValues.\n                    if (crypto.getRandomValues) {\n\n                        a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n                        for (; i < k;) {\n\n                            // 53 bits:\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n                            //                                     11111 11111111 11111111\n                            // 0x20000 is 2^21.\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n                            // Rejection sampling:\n                            // 0 <= v < 9007199254740992\n                            // Probability that v >= 9e15, is\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n                            if (v >= 9e15) {\n                                b = crypto.getRandomValues(new Uint32Array(2));\n                                a[i] = b[0];\n                                a[i + 1] = b[1];\n                            } else {\n\n                                // 0 <= v <= 8999999999999999\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push(v % 1e14);\n                                i += 2;\n                            }\n                        }\n                        i = k / 2;\n\n                        // Node.js supporting crypto.randomBytes.\n                    } else if (crypto.randomBytes) {\n\n                        // buffer\n                        a = crypto.randomBytes(k *= 7);\n\n                        for (; i < k;) {\n\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n                            // 0 <= v < 9007199254740992\n                            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\n                                (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\n                                (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n                            if (v >= 9e15) {\n                                crypto.randomBytes(7).copy(a, i);\n                            } else {\n\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push(v % 1e14);\n                                i += 7;\n                            }\n                        }\n                        i = k / 7;\n                    } else {\n                        CRYPTO = false;\n                        throw Error\n                        (bignumberError + 'crypto unavailable');\n                    }\n                }\n\n                // Use Math.random.\n                if (!CRYPTO) {\n\n                    for (; i < k;) {\n                        v = random53bitInt();\n                        if (v < 9e15) c[i++] = v % 1e14;\n                    }\n                }\n\n                k = c[--i];\n                dp %= LOG_BASE;\n\n                // Convert trailing digits to zeros according to dp.\n                if (k && dp) {\n                    v = POWS_TEN[LOG_BASE - dp];\n                    c[i] = mathfloor(k / v) * v;\n                }\n\n                // Remove trailing elements which are zero.\n                for (; c[i] === 0; c.pop(), i--);\n\n                // Zero?\n                if (i < 0) {\n                    c = [e = 0];\n                } else {\n\n                    // Remove leading elements which are zero and adjust exponent accordingly.\n                    for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\n\n                    // Count the digits of the first element of c to determine leading zeros, and...\n                    for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n                    // adjust the exponent accordingly.\n                    if (i < LOG_BASE) e -= LOG_BASE - i;\n                }\n\n                rand.e = e;\n                rand.c = c;\n                return rand;\n            };\n        })();\n\n\n        // PRIVATE FUNCTIONS\n\n\n        // Called by BigNumber and BigNumber.prototype.toString.\n        convertBase = (function () {\n            var decimal = '0123456789';\n\n            /*\n             * Convert string of baseIn to an array of numbers of baseOut.\n             * Eg. toBaseOut('255', 10, 16) returns [15, 15].\n             * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\n             */\n            function toBaseOut(str, baseIn, baseOut, alphabet) {\n                var j,\n                    arr = [0],\n                    arrL,\n                    i = 0,\n                    len = str.length;\n\n                for (; i < len;) {\n                    for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n                    arr[0] += alphabet.indexOf(str.charAt(i++));\n\n                    for (j = 0; j < arr.length; j++) {\n\n                        if (arr[j] > baseOut - 1) {\n                            if (arr[j + 1] == null) arr[j + 1] = 0;\n                            arr[j + 1] += arr[j] / baseOut | 0;\n                            arr[j] %= baseOut;\n                        }\n                    }\n                }\n\n                return arr.reverse();\n            }\n\n            // Convert a numeric string of baseIn to a numeric string of baseOut.\n            // If the caller is toString, we are converting from base 10 to baseOut.\n            // If the caller is BigNumber, we are converting from baseIn to base 10.\n            return function (str, baseIn, baseOut, sign, callerIsToString) {\n                var alphabet, d, e, k, r, x, xc, y,\n                    i = str.indexOf('.'),\n                    dp = DECIMAL_PLACES,\n                    rm = ROUNDING_MODE;\n\n                // Non-integer.\n                if (i >= 0) {\n                    k = POW_PRECISION;\n\n                    // Unlimited precision.\n                    POW_PRECISION = 0;\n                    str = str.replace('.', '');\n                    y = new BigNumber(baseIn);\n                    x = y.pow(str.length - i);\n                    POW_PRECISION = k;\n\n                    // Convert str as if an integer, then restore the fraction part by dividing the\n                    // result by its base raised to a power.\n\n                    y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\n                        10, baseOut, decimal);\n                    y.e = y.c.length;\n                }\n\n                // Convert the number as integer.\n\n                xc = toBaseOut(str, baseIn, baseOut, callerIsToString\n                    ? (alphabet = ALPHABET, decimal)\n                    : (alphabet = decimal, ALPHABET));\n\n                // xc now represents str as an integer and converted to baseOut. e is the exponent.\n                e = k = xc.length;\n\n                // Remove trailing zeros.\n                for (; xc[--k] == 0; xc.pop());\n\n                // Zero?\n                if (!xc[0]) return alphabet.charAt(0);\n\n                // Does str represent an integer? If so, no need for the division.\n                if (i < 0) {\n                    --e;\n                } else {\n                    x.c = xc;\n                    x.e = e;\n\n                    // The sign is needed for correct rounding.\n                    x.s = sign;\n                    x = div(x, y, dp, rm, baseOut);\n                    xc = x.c;\n                    r = x.r;\n                    e = x.e;\n                }\n\n                // xc now represents str converted to baseOut.\n\n                // THe index of the rounding digit.\n                d = e + dp + 1;\n\n                // The rounding digit: the digit to the right of the digit that may be rounded up.\n                i = xc[d];\n\n                // Look at the rounding digits and mode to determine whether to round up.\n\n                k = baseOut / 2;\n                r = r || d < 0 || xc[d + 1] != null;\n\n                r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n                    : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\n                    rm == (x.s < 0 ? 8 : 7));\n\n                // If the index of the rounding digit is not greater than zero, or xc represents\n                // zero, then the result of the base conversion is zero or, if rounding up, a value\n                // such as 0.00001.\n                if (d < 1 || !xc[0]) {\n\n                    // 1^-dp or 0\n                    str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))\n                        : alphabet.charAt(0);\n                } else {\n\n                    // Truncate xc to the required number of decimal places.\n                    xc.length = d;\n\n                    // Round up?\n                    if (r) {\n\n                        // Rounding up may mean the previous digit has to be rounded up and so on.\n                        for (--baseOut; ++xc[--d] > baseOut;) {\n                            xc[d] = 0;\n\n                            if (!d) {\n                                ++e;\n                                xc = [1].concat(xc);\n                            }\n                        }\n                    }\n\n                    // Determine trailing zeros.\n                    for (k = xc.length; !xc[--k];);\n\n                    // E.g. [4, 11, 15] becomes 4bf.\n                    for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\n\n                    // Add leading zeros, decimal point and trailing zeros as required.\n                    str = toFixedPoint(str, e, alphabet.charAt(0));\n                }\n\n                // The caller will add the sign.\n                return str;\n            };\n        })();\n\n\n        // Perform division in the specified base. Called by div and convertBase.\n        div = (function () {\n\n            // Assume non-zero x and k.\n            function multiply(x, k, base) {\n                var m, temp, xlo, xhi,\n                    carry = 0,\n                    i = x.length,\n                    klo = k % SQRT_BASE,\n                    khi = k / SQRT_BASE | 0;\n\n                for (x = x.slice(); i--;) {\n                    xlo = x[i] % SQRT_BASE;\n                    xhi = x[i] / SQRT_BASE | 0;\n                    m = khi * xlo + xhi * klo;\n                    temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\n                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n                    x[i] = temp % base;\n                }\n\n                if (carry) x = [carry].concat(x);\n\n                return x;\n            }\n\n            function compare(a, b, aL, bL) {\n                var i, cmp;\n\n                if (aL != bL) {\n                    cmp = aL > bL ? 1 : -1;\n                } else {\n\n                    for (i = cmp = 0; i < aL; i++) {\n\n                        if (a[i] != b[i]) {\n                            cmp = a[i] > b[i] ? 1 : -1;\n                            break;\n                        }\n                    }\n                }\n\n                return cmp;\n            }\n\n            function subtract(a, b, aL, base) {\n                var i = 0;\n\n                // Subtract b from a.\n                for (; aL--;) {\n                    a[aL] -= i;\n                    i = a[aL] < b[aL] ? 1 : 0;\n                    a[aL] = i * base + a[aL] - b[aL];\n                }\n\n                // Remove leading zeros.\n                for (; !a[0] && a.length > 1; a.splice(0, 1));\n            }\n\n            // x: dividend, y: divisor.\n            return function (x, y, dp, rm, base) {\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\n                    yL, yz,\n                    s = x.s == y.s ? 1 : -1,\n                    xc = x.c,\n                    yc = y.c;\n\n                // Either NaN, Infinity or 0?\n                if (!xc || !xc[0] || !yc || !yc[0]) {\n\n                    return new BigNumber(\n\n                        // Return NaN if either NaN, or both Infinity or 0.\n                        !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\n\n                            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n                            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\n                    );\n                }\n\n                q = new BigNumber(s);\n                qc = q.c = [];\n                e = x.e - y.e;\n                s = dp + e + 1;\n\n                if (!base) {\n                    base = BASE;\n                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n                    s = s / LOG_BASE | 0;\n                }\n\n                // Result exponent may be one less then the current value of e.\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n                for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n                if (yc[i] > (xc[i] || 0)) e--;\n\n                if (s < 0) {\n                    qc.push(1);\n                    more = true;\n                } else {\n                    xL = xc.length;\n                    yL = yc.length;\n                    i = 0;\n                    s += 2;\n\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n                    n = mathfloor(base / (yc[0] + 1));\n\n                    // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n                    // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n                    if (n > 1) {\n                        yc = multiply(yc, n, base);\n                        xc = multiply(xc, n, base);\n                        yL = yc.length;\n                        xL = xc.length;\n                    }\n\n                    xi = yL;\n                    rem = xc.slice(0, yL);\n                    remL = rem.length;\n\n                    // Add zeros to make remainder as long as divisor.\n                    for (; remL < yL; rem[remL++] = 0);\n                    yz = yc.slice();\n                    yz = [0].concat(yz);\n                    yc0 = yc[0];\n                    if (yc[1] >= base / 2) yc0++;\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\n                    // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n                    do {\n                        n = 0;\n\n                        // Compare divisor and remainder.\n                        cmp = compare(yc, rem, yL, remL);\n\n                        // If divisor < remainder.\n                        if (cmp < 0) {\n\n                            // Calculate trial digit, n.\n\n                            rem0 = rem[0];\n                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n                            // n is how many times the divisor goes into the current remainder.\n                            n = mathfloor(rem0 / yc0);\n\n                            //  Algorithm:\n                            //  product = divisor multiplied by trial digit (n).\n                            //  Compare product and remainder.\n                            //  If product is greater than remainder:\n                            //    Subtract divisor from product, decrement trial digit.\n                            //  Subtract product from remainder.\n                            //  If product was less than remainder at the last compare:\n                            //    Compare new remainder and divisor.\n                            //    If remainder is greater than divisor:\n                            //      Subtract divisor from remainder, increment trial digit.\n\n                            if (n > 1) {\n\n                                // n may be > base only when base is 3.\n                                if (n >= base) n = base - 1;\n\n                                // product = divisor * trial digit.\n                                prod = multiply(yc, n, base);\n                                prodL = prod.length;\n                                remL = rem.length;\n\n                                // Compare product and remainder.\n                                // If product > remainder then trial digit n too high.\n                                // n is 1 too high about 5% of the time, and is not known to have\n                                // ever been more than 1 too high.\n                                while (compare(prod, rem, prodL, remL) == 1) {\n                                    n--;\n\n                                    // Subtract divisor from product.\n                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                                    prodL = prod.length;\n                                    cmp = 1;\n                                }\n                            } else {\n\n                                // n is 0 or 1, cmp is -1.\n                                // If n is 0, there is no need to compare yc and rem again below,\n                                // so change cmp to 1 to avoid it.\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                                if (n == 0) {\n\n                                    // divisor < remainder, so n must be at least 1.\n                                    cmp = n = 1;\n                                }\n\n                                // product = divisor\n                                prod = yc.slice();\n                                prodL = prod.length;\n                            }\n\n                            if (prodL < remL) prod = [0].concat(prod);\n\n                            // Subtract product from remainder.\n                            subtract(rem, prod, remL, base);\n                            remL = rem.length;\n\n                            // If product was < remainder.\n                            if (cmp == -1) {\n\n                                // Compare divisor and new remainder.\n                                // If divisor < new remainder, subtract divisor from remainder.\n                                // Trial digit n too low.\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                                while (compare(yc, rem, yL, remL) < 1) {\n                                    n++;\n\n                                    // Subtract divisor from remainder.\n                                    subtract(rem, yL < remL ? yz : yc, remL, base);\n                                    remL = rem.length;\n                                }\n                            }\n                        } else if (cmp === 0) {\n                            n++;\n                            rem = [0];\n                        } // else cmp === 1 and n will be 0\n\n                        // Add the next digit, n, to the result array.\n                        qc[i++] = n;\n\n                        // Update the remainder.\n                        if (rem[0]) {\n                            rem[remL++] = xc[xi] || 0;\n                        } else {\n                            rem = [xc[xi]];\n                            remL = 1;\n                        }\n                    } while ((xi++ < xL || rem[0] != null) && s--);\n\n                    more = rem[0] != null;\n\n                    // Leading zero?\n                    if (!qc[0]) qc.splice(0, 1);\n                }\n\n                if (base == BASE) {\n\n                    // To calculate q.e, first get the number of digits of qc[0].\n                    for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n\n                    // Caller is convertBase.\n                } else {\n                    q.e = e;\n                    q.r = +more;\n                }\n\n                return q;\n            };\n        })();\n\n\n        /*\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\n         * notation rounded to the specified decimal places or significant digits.\n         *\n         * n: a BigNumber.\n         * i: the index of the last digit required (i.e. the digit that may be rounded up).\n         * rm: the rounding mode.\n         * id: 1 (toExponential) or 2 (toPrecision).\n         */\n        function format(n, i, rm, id) {\n            var c0, e, ne, len, str;\n\n            if (rm == null) rm = ROUNDING_MODE;\n            else intCheck(rm, 0, 8);\n\n            if (!n.c) return n.toString();\n\n            c0 = n.c[0];\n            ne = n.e;\n\n            if (i == null) {\n                str = coeffToString(n.c);\n                str = id == 1 || id == 2 && ne <= TO_EXP_NEG\n                    ? toExponential(str, ne)\n                    : toFixedPoint(str, ne, '0');\n            } else {\n                n = round(new BigNumber(n), i, rm);\n\n                // n.e may have changed if the value was rounded up.\n                e = n.e;\n\n                str = coeffToString(n.c);\n                len = str.length;\n\n                // toPrecision returns exponential notation if the number of significant digits\n                // specified is less than the number of digits necessary to represent the integer\n                // part of the value in fixed-point notation.\n\n                // Exponential notation.\n                if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n\n                    // Append zeros?\n                    for (; len < i; str += '0', len++);\n                    str = toExponential(str, e);\n\n                    // Fixed-point notation.\n                } else {\n                    i -= ne;\n                    str = toFixedPoint(str, e, '0');\n\n                    // Append zeros?\n                    if (e + 1 > len) {\n                        if (--i > 0) for (str += '.'; i--; str += '0');\n                    } else {\n                        i += e - len;\n                        if (i > 0) {\n                            if (e + 1 == len) str += '.';\n                            for (; i--; str += '0');\n                        }\n                    }\n                }\n            }\n\n            return n.s < 0 && c0 ? '-' + str : str;\n        }\n\n\n        // Handle BigNumber.max and BigNumber.min.\n        function maxOrMin(args, method) {\n            var m, n,\n                i = 0;\n\n            if (isArray(args[0])) args = args[0];\n            m = new BigNumber(args[0]);\n\n            for (; ++i < args.length;) {\n                n = new BigNumber(args[i]);\n\n                // If any number is NaN, return NaN.\n                if (!n.s) {\n                    m = n;\n                    break;\n                } else if (method.call(m, n)) {\n                    m = n;\n                }\n            }\n\n            return m;\n        }\n\n\n        /*\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\n         * Called by minus, plus and times.\n         */\n        function normalise(n, c, e) {\n            var i = 1,\n                j = c.length;\n\n            // Remove trailing zeros.\n            for (; !c[--j]; c.pop());\n\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\n            for (j = c[0]; j >= 10; j /= 10, i++);\n\n            // Overflow?\n            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n\n                // Infinity.\n                n.c = n.e = null;\n\n                // Underflow?\n            } else if (e < MIN_EXP) {\n\n                // Zero.\n                n.c = [n.e = 0];\n            } else {\n                n.e = e;\n                n.c = c;\n            }\n\n            return n;\n        }\n\n\n        // Handle values that fail the validity test in BigNumber.\n        parseNumeric = (function () {\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n                dotAfter = /^([^.]+)\\.$/,\n                dotBefore = /^\\.([^.]+)$/,\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n\n            return function (x, str, isNum, b) {\n                var base,\n                    s = isNum ? str : str.replace(whitespaceOrPlus, '');\n\n                // No exception on ±Infinity or NaN.\n                if (isInfinityOrNaN.test(s)) {\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n                    x.c = x.e = null;\n                } else {\n                    if (!isNum) {\n\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n                        s = s.replace(basePrefix, function (m, p1, p2) {\n                            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n                            return !b || b == base ? p1 : m;\n                        });\n\n                        if (b) {\n                            base = b;\n\n                            // E.g. '1.' to '1', '.1' to '0.1'\n                            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n                        }\n\n                        if (str != s) return new BigNumber(s, base);\n                    }\n\n                    // '[BigNumber Error] Not a number: {n}'\n                    // '[BigNumber Error] Not a base {b} number: {n}'\n                    if (BigNumber.DEBUG) {\n                        throw Error\n                        (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n                    }\n\n                    // NaN\n                    x.c = x.e = x.s = null;\n                }\n            }\n        })();\n\n\n        /*\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\n         * If r is truthy, it is known that there are more digits after the rounding digit.\n         */\n        function round(x, sd, rm, r) {\n            var d, i, j, k, n, ni, rd,\n                xc = x.c,\n                pows10 = POWS_TEN;\n\n            // if x is not Infinity or NaN...\n            if (xc) {\n\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\n                // ni is the index of n within x.c.\n                // d is the number of digits of n.\n                // i is the index of rd within n including leading zeros.\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\n                out: {\n\n                    // Get the number of digits of the first element of xc.\n                    for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n                    i = sd - d;\n\n                    // If the rounding digit is in the first element of xc...\n                    if (i < 0) {\n                        i += LOG_BASE;\n                        j = sd;\n                        n = xc[ni = 0];\n\n                        // Get the rounding digit at index j of n.\n                        rd = n / pows10[d - j - 1] % 10 | 0;\n                    } else {\n                        ni = mathceil((i + 1) / LOG_BASE);\n\n                        if (ni >= xc.length) {\n\n                            if (r) {\n\n                                // Needed by sqrt.\n                                for (; xc.length <= ni; xc.push(0));\n                                n = rd = 0;\n                                d = 1;\n                                i %= LOG_BASE;\n                                j = i - LOG_BASE + 1;\n                            } else {\n                                break out;\n                            }\n                        } else {\n                            n = k = xc[ni];\n\n                            // Get the number of digits of n.\n                            for (d = 1; k >= 10; k /= 10, d++);\n\n                            // Get the index of rd within n.\n                            i %= LOG_BASE;\n\n                            // Get the index of rd within n, adjusted for leading zeros.\n                            // The number of leading zeros of n is given by LOG_BASE - d.\n                            j = i - LOG_BASE + d;\n\n                            // Get the rounding digit at index j of n.\n                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n                        }\n                    }\n\n                    r = r || sd < 0 ||\n\n                        // Are there any non-zero digits after the rounding digit?\n                        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n                        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n                        xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n\n                    r = rm < 4\n                        ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n                        : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\n\n                        // Check whether the digit to the left of the rounding digit is odd.\n                        ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\n                        rm == (x.s < 0 ? 8 : 7));\n\n                    if (sd < 1 || !xc[0]) {\n                        xc.length = 0;\n\n                        if (r) {\n\n                            // Convert sd to decimal places.\n                            sd -= x.e + 1;\n\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n                            x.e = -sd || 0;\n                        } else {\n\n                            // Zero.\n                            xc[0] = x.e = 0;\n                        }\n\n                        return x;\n                    }\n\n                    // Remove excess digits.\n                    if (i == 0) {\n                        xc.length = ni;\n                        k = 1;\n                        ni--;\n                    } else {\n                        xc.length = ni + 1;\n                        k = pows10[LOG_BASE - i];\n\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n                        // j > 0 means i > number of leading zeros of n.\n                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n                    }\n\n                    // Round up?\n                    if (r) {\n\n                        for (; ;) {\n\n                            // If the digit to be rounded up is in the first element of xc...\n                            if (ni == 0) {\n\n                                // i will be the length of xc[0] before k is added.\n                                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n                                j = xc[0] += k;\n                                for (k = 1; j >= 10; j /= 10, k++);\n\n                                // if i != k the length has increased.\n                                if (i != k) {\n                                    x.e++;\n                                    if (xc[0] == BASE) xc[0] = 1;\n                                }\n\n                                break;\n                            } else {\n                                xc[ni] += k;\n                                if (xc[ni] != BASE) break;\n                                xc[ni--] = 0;\n                                k = 1;\n                            }\n                        }\n                    }\n\n                    // Remove trailing zeros.\n                    for (i = xc.length; xc[--i] === 0; xc.pop());\n                }\n\n                // Overflow? Infinity.\n                if (x.e > MAX_EXP) {\n                    x.c = x.e = null;\n\n                    // Underflow? Zero.\n                } else if (x.e < MIN_EXP) {\n                    x.c = [x.e = 0];\n                }\n            }\n\n            return x;\n        }\n\n\n        // PROTOTYPE/INSTANCE METHODS\n\n\n        /*\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\n         */\n        P.absoluteValue = P.abs = function () {\n            var x = new BigNumber(this);\n            if (x.s < 0) x.s = 1;\n            return x;\n        };\n\n\n        /*\n         * Return\n         *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\n         *   0 if they have the same value,\n         *   or null if the value of either is NaN.\n         */\n        P.comparedTo = function (y, b) {\n            return compare(this, new BigNumber(y, b));\n        };\n\n\n        /*\n         * If dp is undefined or null or true or false, return the number of decimal places of the\n         * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\n         *\n         * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\n         * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\n         * ROUNDING_MODE if rm is omitted.\n         *\n         * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.decimalPlaces = P.dp = function (dp, rm) {\n            var c, n, v,\n                x = this;\n\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                if (rm == null) rm = ROUNDING_MODE;\n                else intCheck(rm, 0, 8);\n\n                return round(new BigNumber(x), dp + x.e + 1, rm);\n            }\n\n            if (!(c = x.c)) return null;\n            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n\n            // Subtract the number of trailing zeros of the last number.\n            if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n            if (n < 0) n = 0;\n\n            return n;\n        };\n\n\n        /*\n         *  n / 0 = I\n         *  n / N = N\n         *  n / I = 0\n         *  0 / n = 0\n         *  0 / 0 = N\n         *  0 / N = N\n         *  0 / I = 0\n         *  N / n = N\n         *  N / 0 = N\n         *  N / N = N\n         *  N / I = N\n         *  I / n = I\n         *  I / 0 = I\n         *  I / N = N\n         *  I / I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.dividedBy = P.div = function (y, b) {\n            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\n         * BigNumber by the value of BigNumber(y, b).\n         */\n        P.dividedToIntegerBy = P.idiv = function (y, b) {\n            return div(this, new BigNumber(y, b), 0, 1);\n        };\n\n\n        /*\n         * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\n         *\n         * If m is present, return the result modulo m.\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\n         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\n         *\n         * The modular power operation works efficiently when x, n, and m are integers, otherwise it\n         * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\n         *\n         * n {number|string|BigNumber} The exponent. An integer.\n         * [m] {number|string|BigNumber} The modulus.\n         *\n         * '[BigNumber Error] Exponent not an integer: {n}'\n         */\n        P.exponentiatedBy = P.pow = function (n, m) {\n            var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,\n                x = this;\n\n            n = new BigNumber(n);\n\n            // Allow NaN and ±Infinity, but not other non-integers.\n            if (n.c && !n.isInteger()) {\n                throw Error\n                (bignumberError + 'Exponent not an integer: ' + n);\n            }\n\n            if (m != null) m = new BigNumber(m);\n\n            // Exponent of MAX_SAFE_INTEGER is 15.\n            nIsBig = n.e > 14;\n\n            // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n            if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n\n                // The sign of the result of pow when x is negative depends on the evenness of n.\n                // If +n overflows to ±Infinity, the evenness of n would be not be known.\n                y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));\n                return m ? y.mod(m) : y;\n            }\n\n            nIsNeg = n.s < 0;\n\n            if (m) {\n\n                // x % m returns NaN if abs(m) is zero, or m is NaN.\n                if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n\n                isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n\n                if (isModExp) x = x.mod(m);\n\n                // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n                // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n            } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\n                // [1, 240000000]\n                ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\n                // [80000000000000]  [99999750000000]\n                : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n\n                // If x is negative and n is odd, k = -0, else k = 0.\n                k = x.s < 0 && isOdd(n) ? -0 : 0;\n\n                // If x >= 1, k = ±Infinity.\n                if (x.e > -1) k = 1 / k;\n\n                // If n is negative return ±0, else return ±Infinity.\n                return new BigNumber(nIsNeg ? 1 / k : k);\n\n            } else if (POW_PRECISION) {\n\n                // Truncating each coefficient array to a length of k after each multiplication\n                // equates to truncating significant digits to POW_PRECISION + [28, 41],\n                // i.e. there will be a minimum of 28 guard digits retained.\n                k = mathceil(POW_PRECISION / LOG_BASE + 2);\n            }\n\n            if (nIsBig) {\n                half = new BigNumber(0.5);\n                nIsOdd = isOdd(n);\n            } else {\n                nIsOdd = n % 2;\n            }\n\n            if (nIsNeg) n.s = 1;\n\n            y = new BigNumber(ONE);\n\n            // Performs 54 loop iterations for n of 9007199254740991.\n            for (; ;) {\n\n                if (nIsOdd) {\n                    y = y.times(x);\n                    if (!y.c) break;\n\n                    if (k) {\n                        if (y.c.length > k) y.c.length = k;\n                    } else if (isModExp) {\n                        y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n                    }\n                }\n\n                if (nIsBig) {\n                    n = n.times(half);\n                    round(n, n.e + 1, 1);\n                    if (!n.c[0]) break;\n                    nIsBig = n.e > 14;\n                    nIsOdd = isOdd(n);\n                } else {\n                    n = mathfloor(n / 2);\n                    if (!n) break;\n                    nIsOdd = n % 2;\n                }\n\n                x = x.times(x);\n\n                if (k) {\n                    if (x.c && x.c.length > k) x.c.length = k;\n                } else if (isModExp) {\n                    x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n                }\n            }\n\n            if (isModExp) return y;\n            if (nIsNeg) y = ONE.div(y);\n\n            return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\n         * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\n         */\n        P.integerValue = function (rm) {\n            var n = new BigNumber(this);\n            if (rm == null) rm = ROUNDING_MODE;\n            else intCheck(rm, 0, 8);\n            return round(n, n.e + 1, rm);\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isEqualTo = P.eq = P.equals = function (y, b) {\n            return compare(this, new BigNumber(y, b)) === 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is a finite number, otherwise return false.\n         */\n        P.isFinite = function () {\n            return !!this.c;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isGreaterThan = P.gt = function (y, b) {\n            return compare(this, new BigNumber(y, b)) > 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than or equal to the value of\n         * BigNumber(y, b), otherwise return false.\n         */\n        P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n            return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\n         */\n        P.isInteger = function () {\n            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isLessThan = P.lt = function (y, b) {\n            return compare(this, new BigNumber(y, b)) < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than or equal to the value of\n         * BigNumber(y, b), otherwise return false.\n         */\n        P.isLessThanOrEqualTo = P.lte = function (y, b) {\n            return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is NaN, otherwise return false.\n         */\n        P.isNaN = function () {\n            return !this.s;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is negative, otherwise return false.\n         */\n        P.isNegative = function () {\n            return this.s < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is positive, otherwise return false.\n         */\n        P.isPositive = function () {\n            return this.s > 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\n         */\n        P.isZero = function () {\n            return !!this.c && this.c[0] == 0;\n        };\n\n\n        /*\n         *  n - 0 = n\n         *  n - N = N\n         *  n - I = -I\n         *  0 - n = -n\n         *  0 - 0 = 0\n         *  0 - N = N\n         *  0 - I = -I\n         *  N - n = N\n         *  N - 0 = N\n         *  N - N = N\n         *  N - I = N\n         *  I - n = I\n         *  I - 0 = I\n         *  I - N = N\n         *  I - I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\n         * BigNumber(y, b).\n         */\n        P.minus = function (y, b) {\n            var i, j, t, xLTy,\n                x = this,\n                a = x.s;\n\n            y = new BigNumber(y, b);\n            b = y.s;\n\n            // Either NaN?\n            if (!a || !b) return new BigNumber(NaN);\n\n            // Signs differ?\n            if (a != b) {\n                y.s = -b;\n                return x.plus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if (!xe || !ye) {\n\n                // Either Infinity?\n                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n\n                // Either zero?\n                if (!xc[0] || !yc[0]) {\n\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                    return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\n\n                        // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n                        ROUNDING_MODE == 3 ? -0 : 0);\n                }\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Determine which is the bigger number.\n            if (a = xe - ye) {\n\n                if (xLTy = a < 0) {\n                    a = -a;\n                    t = xc;\n                } else {\n                    ye = xe;\n                    t = yc;\n                }\n\n                t.reverse();\n\n                // Prepend zeros to equalise exponents.\n                for (b = a; b--; t.push(0));\n                t.reverse();\n            } else {\n\n                // Exponents equal. Check digit by digit.\n                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n                for (a = b = 0; b < j; b++) {\n\n                    if (xc[b] != yc[b]) {\n                        xLTy = xc[b] < yc[b];\n                        break;\n                    }\n                }\n            }\n\n            // x < y? Point xc to the array of the bigger number.\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n\n            b = (j = yc.length) - (i = xc.length);\n\n            // Append zeros to xc if shorter.\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n            if (b > 0) for (; b--; xc[i++] = 0);\n            b = BASE - 1;\n\n            // Subtract yc from xc.\n            for (; j > a;) {\n\n                if (xc[--j] < yc[j]) {\n                    for (i = j; i && !xc[--i]; xc[i] = b);\n                    --xc[i];\n                    xc[j] += BASE;\n                }\n\n                xc[j] -= yc[j];\n            }\n\n            // Remove leading zeros and adjust exponent accordingly.\n            for (; xc[0] == 0; xc.splice(0, 1), --ye);\n\n            // Zero?\n            if (!xc[0]) {\n\n                // Following IEEE 754 (2008) 6.3,\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\n                y.c = [y.e = 0];\n                return y;\n            }\n\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n            // for finite x and y.\n            return normalise(y, xc, ye);\n        };\n\n\n        /*\n         *   n % 0 =  N\n         *   n % N =  N\n         *   n % I =  n\n         *   0 % n =  0\n         *  -0 % n = -0\n         *   0 % 0 =  N\n         *   0 % N =  N\n         *   0 % I =  0\n         *   N % n =  N\n         *   N % 0 =  N\n         *   N % N =  N\n         *   N % I =  N\n         *   I % n =  N\n         *   I % 0 =  N\n         *   I % N =  N\n         *   I % I =  N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\n         */\n        P.modulo = P.mod = function (y, b) {\n            var q, s,\n                x = this;\n\n            y = new BigNumber(y, b);\n\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n            if (!x.c || !y.s || y.c && !y.c[0]) {\n                return new BigNumber(NaN);\n\n                // Return x if y is Infinity or x is zero.\n            } else if (!y.c || x.c && !x.c[0]) {\n                return new BigNumber(x);\n            }\n\n            if (MODULO_MODE == 9) {\n\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\n                // r = x - qy    where  0 <= r < abs(y)\n                s = y.s;\n                y.s = 1;\n                q = div(x, y, 0, 3);\n                y.s = s;\n                q.s *= s;\n            } else {\n                q = div(x, y, 0, MODULO_MODE);\n            }\n\n            y = x.minus(q.times(y));\n\n            // To match JavaScript %, ensure sign of zero is sign of dividend.\n            if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n\n            return y;\n        };\n\n\n        /*\n         *  n * 0 = 0\n         *  n * N = N\n         *  n * I = I\n         *  0 * n = 0\n         *  0 * 0 = 0\n         *  0 * N = N\n         *  0 * I = N\n         *  N * n = N\n         *  N * 0 = N\n         *  N * N = N\n         *  N * I = N\n         *  I * n = I\n         *  I * 0 = N\n         *  I * N = N\n         *  I * I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\n         * of BigNumber(y, b).\n         */\n        P.multipliedBy = P.times = function (y, b) {\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\n                base, sqrtBase,\n                x = this,\n                xc = x.c,\n                yc = (y = new BigNumber(y, b)).c;\n\n            // Either NaN, ±Infinity or ±0?\n            if (!xc || !yc || !xc[0] || !yc[0]) {\n\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n                    y.c = y.e = y.s = null;\n                } else {\n                    y.s *= x.s;\n\n                    // Return ±Infinity if either is ±Infinity.\n                    if (!xc || !yc) {\n                        y.c = y.e = null;\n\n                        // Return ±0 if either is ±0.\n                    } else {\n                        y.c = [0];\n                        y.e = 0;\n                    }\n                }\n\n                return y;\n            }\n\n            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n            y.s *= x.s;\n            xcL = xc.length;\n            ycL = yc.length;\n\n            // Ensure xc points to longer array and xcL to its length.\n            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n            // Initialise the result array with zeros.\n            for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n            base = BASE;\n            sqrtBase = SQRT_BASE;\n\n            for (i = ycL; --i >= 0;) {\n                c = 0;\n                ylo = yc[i] % sqrtBase;\n                yhi = yc[i] / sqrtBase | 0;\n\n                for (k = xcL, j = i + k; j > i;) {\n                    xlo = xc[--k] % sqrtBase;\n                    xhi = xc[k] / sqrtBase | 0;\n                    m = yhi * xlo + xhi * ylo;\n                    xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\n                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n                    zc[j--] = xlo % base;\n                }\n\n                zc[j] = c;\n            }\n\n            if (c) {\n                ++e;\n            } else {\n                zc.splice(0, 1);\n            }\n\n            return normalise(y, zc, e);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\n         * i.e. multiplied by -1.\n         */\n        P.negated = function () {\n            var x = new BigNumber(this);\n            x.s = -x.s || null;\n            return x;\n        };\n\n\n        /*\n         *  n + 0 = n\n         *  n + N = N\n         *  n + I = I\n         *  0 + n = n\n         *  0 + 0 = 0\n         *  0 + N = N\n         *  0 + I = I\n         *  N + n = N\n         *  N + 0 = N\n         *  N + N = N\n         *  N + I = N\n         *  I + n = I\n         *  I + 0 = I\n         *  I + N = N\n         *  I + I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\n         * BigNumber(y, b).\n         */\n        P.plus = function (y, b) {\n            var t,\n                x = this,\n                a = x.s;\n\n            y = new BigNumber(y, b);\n            b = y.s;\n\n            // Either NaN?\n            if (!a || !b) return new BigNumber(NaN);\n\n            // Signs differ?\n            if (a != b) {\n                y.s = -b;\n                return x.minus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if (!xe || !ye) {\n\n                // Return ±Infinity if either ±Infinity.\n                if (!xc || !yc) return new BigNumber(a / 0);\n\n                // Either zero?\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n            if (a = xe - ye) {\n                if (a > 0) {\n                    ye = xe;\n                    t = yc;\n                } else {\n                    a = -a;\n                    t = xc;\n                }\n\n                t.reverse();\n                for (; a--; t.push(0));\n                t.reverse();\n            }\n\n            a = xc.length;\n            b = yc.length;\n\n            // Point xc to the longer array, and b to the shorter length.\n            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\n\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n            for (a = 0; b;) {\n                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n            }\n\n            if (a) {\n                xc = [a].concat(xc);\n                ++ye;\n            }\n\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n            // ye = MAX_EXP + 1 possible\n            return normalise(y, xc, ye);\n        };\n\n\n        /*\n         * If sd is undefined or null or true or false, return the number of significant digits of\n         * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\n         * If sd is true include integer-part trailing zeros in the count.\n         *\n         * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\n         * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\n         * ROUNDING_MODE if rm is omitted.\n         *\n         * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\n         *                     boolean: whether to count integer-part trailing zeros: true or false.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\n         */\n        P.precision = P.sd = function (sd, rm) {\n            var c, n, v,\n                x = this;\n\n            if (sd != null && sd !== !!sd) {\n                intCheck(sd, 1, MAX);\n                if (rm == null) rm = ROUNDING_MODE;\n                else intCheck(rm, 0, 8);\n\n                return round(new BigNumber(x), sd, rm);\n            }\n\n            if (!(c = x.c)) return null;\n            v = c.length - 1;\n            n = v * LOG_BASE + 1;\n\n            if (v = c[v]) {\n\n                // Subtract the number of trailing zeros of the last element.\n                for (; v % 10 == 0; v /= 10, n--);\n\n                // Add the number of digits of the first element.\n                for (v = c[0]; v >= 10; v /= 10, n++);\n            }\n\n            if (sd && x.e + 1 > n) n = x.e + 1;\n\n            return n;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\n         *\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\n         */\n        P.shiftedBy = function (k) {\n            intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n            return this.times('1e' + k);\n        };\n\n\n        /*\n         *  sqrt(-n) =  N\n         *  sqrt(N) =  N\n         *  sqrt(-I) =  N\n         *  sqrt(I) =  I\n         *  sqrt(0) =  0\n         *  sqrt(-0) = -0\n         *\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.squareRoot = P.sqrt = function () {\n            var m, n, r, rep, t,\n                x = this,\n                c = x.c,\n                s = x.s,\n                e = x.e,\n                dp = DECIMAL_PLACES + 4,\n                half = new BigNumber('0.5');\n\n            // Negative/NaN/Infinity/zero?\n            if (s !== 1 || !c || !c[0]) {\n                return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n            }\n\n            // Initial estimate.\n            s = Math.sqrt(+x);\n\n            // Math.sqrt underflow/overflow?\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n            if (s == 0 || s == 1 / 0) {\n                n = coeffToString(c);\n                if ((n.length + e) % 2 == 0) n += '0';\n                s = Math.sqrt(n);\n                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n                if (s == 1 / 0) {\n                    n = '1e' + e;\n                } else {\n                    n = s.toExponential();\n                    n = n.slice(0, n.indexOf('e') + 1) + e;\n                }\n\n                r = new BigNumber(n);\n            } else {\n                r = new BigNumber(s + '');\n            }\n\n            // Check for zero.\n            // r could be zero if MIN_EXP is changed after the this value was created.\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n            // coeffToString to throw.\n            if (r.c[0]) {\n                e = r.e;\n                s = e + dp;\n                if (s < 3) s = 0;\n\n                // Newton-Raphson iteration.\n                for (; ;) {\n                    t = r;\n                    r = half.times(t.plus(div(x, t, dp, 1)));\n\n                    if (coeffToString(t.c  ).slice(0, s) === (n =\n                        coeffToString(r.c)).slice(0, s)) {\n\n                        // The exponent of r may here be one less than the final result exponent,\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n                        // are indexed correctly.\n                        if (r.e < e) --s;\n                        n = n.slice(s - 3, s + 1);\n\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n                        // iteration.\n                        if (n == '9999' || !rep && n == '4999') {\n\n                            // On the first iteration only, check to see if rounding up gives the\n                            // exact result as the nines may infinitely repeat.\n                            if (!rep) {\n                                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                                if (t.times(t).eq(x)) {\n                                    r = t;\n                                    break;\n                                }\n                            }\n\n                            dp += 4;\n                            s += 4;\n                            rep = 1;\n                        } else {\n\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n                            // result. If not, then there are further digits and m will be truthy.\n                            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n                                // Truncate to the first rounding digit.\n                                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                                m = !r.times(r).eq(x);\n                            }\n\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in exponential notation and\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toExponential = function (dp, rm) {\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                dp++;\n            }\n            return format(this, dp, rm, 1);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toFixed = function (dp, rm) {\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                dp = dp + this.e + 1;\n            }\n            return format(this, dp, rm);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\n         * of the FORMAT object (see BigNumber.set).\n         *\n         * FORMAT = {\n         *      decimalSeparator : '.',\n         *      groupSeparator : ',',\n         *      groupSize : 3,\n         *      secondaryGroupSize : 0,\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\n         *      fractionGroupSize : 0\n         * };\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toFormat = function (dp, rm) {\n            var str = this.toFixed(dp, rm);\n\n            if (this.c) {\n                var i,\n                    arr = str.split('.'),\n                    g1 = +FORMAT.groupSize,\n                    g2 = +FORMAT.secondaryGroupSize,\n                    groupSeparator = FORMAT.groupSeparator,\n                    intPart = arr[0],\n                    fractionPart = arr[1],\n                    isNeg = this.s < 0,\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\n                    len = intDigits.length;\n\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n                if (g1 > 0 && len > 0) {\n                    i = len % g1 || g1;\n                    intPart = intDigits.substr(0, i);\n\n                    for (; i < len; i += g1) {\n                        intPart += groupSeparator + intDigits.substr(i, g1);\n                    }\n\n                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n                    if (isNeg) intPart = '-' + intPart;\n                }\n\n                str = fractionPart\n                    ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)\n                    ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\n                        '$&' + FORMAT.fractionGroupSeparator)\n                    : fractionPart)\n                    : intPart;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return a string array representing the value of this BigNumber as a simple fraction with\n         * an integer numerator and an integer denominator. The denominator will be a positive\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\n         * denominator is not specified, the denominator will be the lowest value necessary to\n         * represent the number exactly.\n         *\n         * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\n         *\n         * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\n         */\n        P.toFraction = function (md) {\n            var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,\n                x = this,\n                xc = x.c;\n\n            if (md != null) {\n                n = new BigNumber(md);\n\n                // Throw if md is less than one or is not an integer, unless it is Infinity.\n                if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n                    throw Error\n                    (bignumberError + 'Argument ' +\n                        (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);\n                }\n            }\n\n            if (!xc) return x.toString();\n\n            d = new BigNumber(ONE);\n            n1 = d0 = new BigNumber(ONE);\n            d1 = n0 = new BigNumber(ONE);\n            s = coeffToString(xc);\n\n            // Determine initial denominator.\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n            e = d.e = s.length - x.e - 1;\n            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n            md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\n\n            exp = MAX_EXP;\n            MAX_EXP = 1 / 0;\n            n = new BigNumber(s);\n\n            // n0 = d1 = 0\n            n0.c[0] = 0;\n\n            for (; ;)  {\n                q = div(n, d, 0, 1);\n                d2 = d0.plus(q.times(d1));\n                if (d2.comparedTo(md) == 1) break;\n                d0 = d1;\n                d1 = d2;\n                n1 = n0.plus(q.times(d2 = n1));\n                n0 = d2;\n                d = n.minus(q.times(d2 = d));\n                n = d2;\n            }\n\n            d2 = div(md.minus(d0), d1, 0, 1);\n            n0 = n0.plus(d2.times(n1));\n            d0 = d0.plus(d2.times(d1));\n            n0.s = n1.s = x.s;\n            e *= 2;\n\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\n            arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\n                div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1\n                ? [n1.toString(), d1.toString()]\n                : [n0.toString(), d0.toString()];\n\n            MAX_EXP = exp;\n            return arr;\n        };\n\n\n        /*\n         * Return the value of this BigNumber converted to a number primitive.\n         */\n        P.toNumber = function () {\n            return +this;\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\n         * necessary to represent the integer part of the value in fixed-point notation, then use\n         * exponential notation.\n         *\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\n         */\n        P.toPrecision = function (sd, rm) {\n            if (sd != null) intCheck(sd, 1, MAX);\n            return format(this, sd, rm, 2);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\n         * TO_EXP_NEG, return exponential notation.\n         *\n         * [b] {number} Integer, 2 to ALPHABET.length inclusive.\n         *\n         * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n         */\n        P.toString = function (b) {\n            var str,\n                n = this,\n                s = n.s,\n                e = n.e;\n\n            // Infinity or NaN?\n            if (e === null) {\n\n                if (s) {\n                    str = 'Infinity';\n                    if (s < 0) str = '-' + str;\n                } else {\n                    str = 'NaN';\n                }\n            } else {\n                str = coeffToString(n.c);\n\n                if (b == null) {\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n                        ? toExponential(str, e)\n                        : toFixedPoint(str, e, '0');\n                } else {\n                    intCheck(b, 2, ALPHABET.length, 'Base');\n                    str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\n                }\n\n                if (s < 0 && n.c[0]) str = '-' + str;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return as toString, but do not accept a base argument, and include the minus sign for\n         * negative zero.\n         */\n        P.valueOf = P.toJSON = function () {\n            var str,\n                n = this,\n                e = n.e;\n\n            if (e === null) return n.toString();\n\n            str = coeffToString(n.c);\n\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n                ? toExponential(str, e)\n                : toFixedPoint(str, e, '0');\n\n            return n.s < 0 ? '-' + str : str;\n        };\n\n\n        P._isBigNumber = true;\n\n        if (configObject != null) BigNumber.set(configObject);\n\n        return BigNumber;\n    }\n\n\n    // PRIVATE HELPER FUNCTIONS\n\n\n    function bitFloor(n) {\n        var i = n | 0;\n        return n > 0 || n === i ? i : i - 1;\n    }\n\n\n    // Return a coefficient array as a string of base 10 digits.\n    function coeffToString(a) {\n        var s, z,\n            i = 1,\n            j = a.length,\n            r = a[0] + '';\n\n        for (; i < j;) {\n            s = a[i++] + '';\n            z = LOG_BASE - s.length;\n            for (; z--; s = '0' + s);\n            r += s;\n        }\n\n        // Determine trailing zeros.\n        for (j = r.length; r.charCodeAt(--j) === 48;);\n        return r.slice(0, j + 1 || 1);\n    }\n\n\n    // Compare the value of BigNumbers x and y.\n    function compare(x, y) {\n        var a, b,\n            xc = x.c,\n            yc = y.c,\n            i = x.s,\n            j = y.s,\n            k = x.e,\n            l = y.e;\n\n        // Either NaN?\n        if (!i || !j) return null;\n\n        a = xc && !xc[0];\n        b = yc && !yc[0];\n\n        // Either zero?\n        if (a || b) return a ? b ? 0 : -j : i;\n\n        // Signs differ?\n        if (i != j) return i;\n\n        a = i < 0;\n        b = k == l;\n\n        // Either Infinity?\n        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n\n        // Compare exponents.\n        if (!b) return k > l ^ a ? 1 : -1;\n\n        j = (k = xc.length) < (l = yc.length) ? k : l;\n\n        // Compare digit by digit.\n        for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n        // Compare lengths.\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\n    }\n\n\n    /*\n     * Check that n is a primitive number, an integer, and in range, otherwise throw.\n     */\n    function intCheck(n, min, max, name) {\n        if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\n            throw Error\n            (bignumberError + (name || 'Argument') + (typeof n == 'number'\n                ? n < min || n > max ? ' out of range: ' : ' not an integer: '\n                : ' not a primitive number: ') + n);\n        }\n    }\n\n\n    function isArray(obj) {\n        return Object.prototype.toString.call(obj) == '[object Array]';\n    }\n\n\n    // Assumes finite n.\n    function isOdd(n) {\n        var k = n.c.length - 1;\n        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n    }\n\n\n    function toExponential(str, e) {\n        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\n            (e < 0 ? 'e' : 'e+') + e;\n    }\n\n\n    function toFixedPoint(str, e, z) {\n        var len, zs;\n\n        // Negative exponent?\n        if (e < 0) {\n\n            // Prepend zeros.\n            for (zs = z + '.'; ++e; zs += z);\n            str = zs + str;\n\n            // Positive exponent\n        } else {\n            len = str.length;\n\n            // Append zeros.\n            if (++e > len) {\n                for (zs = z, e -= len; --e; zs += z);\n                str += zs;\n            } else if (e < len) {\n                str = str.slice(0, e) + '.' + str.slice(e);\n            }\n        }\n\n        return str;\n    }\n\n\n    // EXPORT\n\n\n    BigNumber = clone();\n    BigNumber['default'] = BigNumber.BigNumber = BigNumber;\n    globalObject.BigNumber = BigNumber;\n})(Class.scope);\nBigNumber = Class.scope.BigNumber;\nBigNumber.config({ DECIMAL_PLACES: 10 });\n","class NumberUtils {\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint8(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT8_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint16(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT16_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint32(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT32_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint64(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT64_MAX;\n    }\n\n    /**\n     * @return {number}\n     */\n    static randomUint32() {\n        return Math.floor(Math.random() * (NumberUtils.UINT32_MAX + 1));\n    }\n\n    /**\n     * @return {number}\n     */\n    static randomUint64() {\n        return Math.floor(Math.random() * (NumberUtils.UINT64_MAX + 1));\n    }\n}\n\nNumberUtils.UINT8_MAX = 255;\nNumberUtils.UINT16_MAX = 65535;\nNumberUtils.UINT32_MAX = 4294967295;\nNumberUtils.UINT64_MAX = Number.MAX_SAFE_INTEGER;\n//Object.freeze(NumberUtils);\nClass.register(NumberUtils);\n","class BufferUtils {\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toAscii(buffer) {\n        return String.fromCharCode.apply(null, new Uint8Array(buffer));\n    }\n\n    /**\n     * @param {string} string\n     * @return {Uint8Array}\n     */\n    static fromAscii(string) {\n        const buf = new Uint8Array(string.length);\n        for (let i = 0; i < string.length; ++i) {\n            buf[i] = string.charCodeAt(i);\n        }\n        return buf;\n    }\n\n    static _codePointTextDecoder(u8) {\n        if (typeof TextDecoder === 'undefined') throw new Error('TextDecoder not supported');\n        if (BufferUtils._ISO_8859_15_DECODER === null) throw new Error('TextDecoder does not supprot iso-8859-15');\n        if (BufferUtils._ISO_8859_15_DECODER === undefined) {\n            try {\n                BufferUtils._ISO_8859_15_DECODER = new TextDecoder('iso-8859-15');\n            } finally {\n                BufferUtils._ISO_8859_15_DECODER = null;\n            }\n        }\n        return BufferUtils._ISO_8859_15_DECODER.decode(u8)\n            .replace('€', '¤').replace('Š', '¦').replace('š', '¨').replace('Ž', '´')\n            .replace('ž', '¸').replace('Œ', '¼').replace('œ', '½').replace('Ÿ', '¾');\n    }\n\n    static _tripletToBase64(num) {\n        return BufferUtils._BASE64_LOOKUP[num >> 18 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 12 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 6 & 0x3F] + BufferUtils._BASE64_LOOKUP[num & 0x3F];\n    }\n\n    static _base64encodeChunk(u8, start, end) {\n        let tmp;\n        const output = [];\n        for (let i = start; i < end; i += 3) {\n            tmp = ((u8[i] << 16) & 0xFF0000) + ((u8[i + 1] << 8) & 0xFF00) + (u8[i + 2] & 0xFF);\n            output.push(BufferUtils._tripletToBase64(tmp));\n        }\n        return output.join('');\n    }\n\n    static _base64fromByteArray(u8) {\n        let tmp;\n        const len = u8.length;\n        const extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n        let output = '';\n        const parts = [];\n        const maxChunkLength = 16383; // must be multiple of 3\n\n        // go through the array every three bytes, we'll deal with trailing stuff later\n        for (let i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n            parts.push(BufferUtils._base64encodeChunk(u8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n        }\n\n        // pad the end with zeros, but make sure to not forget the extra bytes\n        if (extraBytes === 1) {\n            tmp = u8[len - 1];\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 2];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 4) & 0x3F];\n            output += '==';\n        } else if (extraBytes === 2) {\n            tmp = (u8[len - 2] << 8) + (u8[len - 1]);\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 10];\n            output += BufferUtils._BASE64_LOOKUP[(tmp >> 4) & 0x3F];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 2) & 0x3F];\n            output += '=';\n        }\n\n        parts.push(output);\n\n        return parts.join('');\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toBase64(buffer) {\n        if (PlatformUtils.isNodeJs()) {\n            return new Buffer(buffer).toString('base64');\n        } else if (typeof TextDecoder !== 'undefined' && BufferUtils._ISO_8859_15_DECODER !== null) {\n            try {\n                return btoa(BufferUtils._codePointTextDecoder(new Uint8Array(buffer)));\n            } catch (e) {\n                // Disabled itself\n            }\n        }\n\n        return BufferUtils._base64fromByteArray(new Uint8Array(buffer));\n    }\n\n    /**\n     * @param {string} base64\n     * @return {SerialBuffer}\n     */\n    static fromBase64(base64) {\n        return new SerialBuffer(Uint8Array.from(atob(base64), c => c.charCodeAt(0)));\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toBase64Url(buffer) {\n        return BufferUtils.toBase64(buffer).replace(/\\//g, '_').replace(/\\+/g, '-').replace(/=/g, '.');\n    }\n\n    /**\n     * @param {string} base64\n     * @return {SerialBuffer}\n     */\n    static fromBase64Url(base64) {\n        return new SerialBuffer(Uint8Array.from(atob(base64.replace(/_/g, '/').replace(/-/g, '+').replace(/\\./g, '=')), c => c.charCodeAt(0)));\n    }\n\n    /**\n     * @param {Uint8Array} buf\n     * @param {string} [alphabet] Alphabet to use\n     * @return {string}\n     */\n    static toBase32(buf, alphabet = BufferUtils.BASE32_ALPHABET.NIMIQ) {\n        let shift = 3, carry = 0, byte, symbol, i, res = '';\n\n        for (i = 0; i < buf.length; i++) {\n            byte = buf[i];\n            symbol = carry | (byte >> shift);\n            res += alphabet[symbol & 0x1f];\n\n            if (shift > 5) {\n                shift -= 5;\n                symbol = byte >> shift;\n                res += alphabet[symbol & 0x1f];\n            }\n\n            shift = 5 - shift;\n            carry = byte << shift;\n            shift = 8 - shift;\n        }\n\n        if (shift !== 3) {\n            res += alphabet[carry & 0x1f];\n        }\n\n        while (res.length % 8 !== 0 && alphabet.length === 33) {\n            res += alphabet[32];\n        }\n\n        return res;\n    }\n\n    /**\n     * @param {string} base32\n     * @param {string} [alphabet] Alphabet to use\n     * @return {Uint8Array}\n     */\n    static fromBase32(base32, alphabet = BufferUtils.BASE32_ALPHABET.NIMIQ) {\n        const charmap = [];\n        alphabet.toUpperCase().split('').forEach((c, i) => {\n            if (!(c in charmap)) charmap[c] = i;\n        });\n\n        let symbol, shift = 8, carry = 0, buf = [];\n        base32.toUpperCase().split('').forEach((char) => {\n            // ignore padding\n            if (alphabet.length === 33 && char === alphabet[32]) return;\n\n            symbol = charmap[char] & 0xff;\n\n            shift -= 5;\n            if (shift > 0) {\n                carry |= symbol << shift;\n            } else if (shift < 0) {\n                buf.push(carry | (symbol >> -shift));\n                shift += 8;\n                carry = (symbol << shift) & 0xff;\n            } else {\n                buf.push(carry | symbol);\n                shift = 8;\n                carry = 0;\n            }\n        });\n\n        if (shift !== 8 && carry !== 0) {\n            buf.push(carry);\n        }\n\n        return new Uint8Array(buf);\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toHex(buffer) {\n        let hex = '';\n        for (let i = 0; i < buffer.length; i++) {\n            const code = buffer[i];\n            hex += BufferUtils.HEX_ALPHABET[code >>> 4];\n            hex += BufferUtils.HEX_ALPHABET[code & 0x0F];\n        }\n        return hex;\n    }\n\n    /**\n     * @param {string} hex\n     * @return {SerialBuffer}\n     */\n    static fromHex(hex) {\n        hex = hex.trim();\n        if (!StringUtils.isHexBytes(hex)) return null;\n        return new SerialBuffer(Uint8Array.from(hex.match(/.{2}/g) || [], byte => parseInt(byte, 16)));\n    }\n\n    /**\n     * @template T\n     * @param {T} a\n     * @param {*} b\n     * @return {T}\n     */\n    static concatTypedArrays(a, b) {\n        const c = new (a.constructor)(a.length + b.length);\n        c.set(a, 0);\n        c.set(b, a.length);\n        return c;\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {boolean}\n     */\n    static equals(a, b) {\n        if (a.length !== b.length) return false;\n        const viewA = new Uint8Array(a);\n        const viewB = new Uint8Array(b);\n        for (let i = 0; i < a.length; i++) {\n            if (viewA[i] !== viewB[i]) return false;\n        }\n        return true;\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {number} -1 if a is smaller than b, 1 if a is larger than b, 0 if a equals b.\n     */\n    static compare(a, b) {\n        if (a.length < b.length) return -1;\n        if (a.length > b.length) return 1;\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] < b[i]) return -1;\n            if (a[i] > b[i]) return 1;\n        }\n        return 0;\n    }\n\n    /**\n     * @param {Uint8Array} a\n     * @param {Uint8Array} b\n     * @return {Uint8Array}\n     */\n    static xor(a, b) {\n        const res = new Uint8Array(a.byteLength);\n        for (let i = 0; i < a.byteLength; ++i) {\n            res[i] = a[i] ^ b[i];\n        }\n        return res;\n    }\n}\nBufferUtils.BASE64_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nBufferUtils.BASE32_ALPHABET = {\n    RFC4648: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n    RFC4648_HEX: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n    NIMIQ: '0123456789ABCDEFGHJKLMNPQRSTUVXY'\n};\nBufferUtils.HEX_ALPHABET = '0123456789abcdef';\nBufferUtils._BASE64_LOOKUP = [];\nfor (let i = 0, len = BufferUtils.BASE64_ALPHABET.length; i < len; ++i) {\n    BufferUtils._BASE64_LOOKUP[i] = BufferUtils.BASE64_ALPHABET[i];\n}\n\nClass.register(BufferUtils);\n","class SerialBuffer extends Uint8Array {\n    /**\n     * @param {*} bufferOrArrayOrLength\n     */\n    constructor(bufferOrArrayOrLength) {\n        super(bufferOrArrayOrLength);\n        this._view = new DataView(this.buffer);\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    /**\n     * @param {number} start\n     * @param {number} end\n     * @return {Uint8Array}\n     */\n    subarray(start, end) {\n        return ArrayUtils.subarray(this, start, end);\n    }\n\n    /** @type {number} */\n    get readPos() {\n        return this._readPos;\n    }\n\n    /** @type {number} */\n    set readPos(value) {\n        if (value < 0 || value > this.byteLength) throw `Invalid readPos ${value}`;\n        this._readPos = value;\n    }\n\n    /** @type {number} */\n    get writePos() {\n        return this._writePos;\n    }\n\n    /** @type {number} */\n    set writePos(value) {\n        if (value < 0 || value > this.byteLength) throw `Invalid writePos ${value}`;\n        this._writePos = value;\n    }\n\n    /**\n     * Resets the read and write position of the buffer to zero.\n     * @returns {void}\n     */\n    reset() {\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    /**\n     * @param {number} length\n     * @return {Uint8Array}\n     */\n    read(length) {\n        const value = this.subarray(this._readPos, this._readPos + length);\n        this._readPos += length;\n        return new Uint8Array(value);\n    }\n\n    /**\n     * @param {*} array\n     */\n    write(array) {\n        this.set(array, this._writePos);\n        this._writePos += array.byteLength;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint8() {\n        return this._view.getUint8(this._readPos++);\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint8(value) {\n        this._view.setUint8(this._writePos++, value);\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint16() {\n        const value = this._view.getUint16(this._readPos);\n        this._readPos += 2;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint16(value) {\n        this._view.setUint16(this._writePos, value);\n        this._writePos += 2;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint32() {\n        const value = this._view.getUint32(this._readPos);\n        this._readPos += 4;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint32(value) {\n        this._view.setUint32(this._writePos, value);\n        this._writePos += 4;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint64() {\n        const value = this._view.getUint32(this._readPos) * Math.pow(2, 32) + this._view.getUint32(this._readPos + 4);\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        this._readPos += 8;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint64(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        this._view.setUint32(this._writePos, Math.floor(value / Math.pow(2, 32)));\n        this._view.setUint32(this._writePos + 4, value);\n        this._writePos += 8;\n    }\n\n    /**\n     * @return {number}\n     */\n    readVarUint() {\n        const value = this.readUint8();\n        if (value < 0xFD) {\n            return value;\n        } else if (value === 0xFD) {\n            return this.readUint16();\n        } else if (value === 0xFE) {\n            return this.readUint32();\n        } else /*if (value === 0xFF)*/ {\n            return this.readUint64();\n        }\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeVarUint(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        if (value < 0xFD) {\n            this.writeUint8(value);\n        } else if (value <= 0xFFFF) {\n            this.writeUint8(0xFD);\n            this.writeUint16(value);\n        } else if (value <= 0xFFFFFFFF) {\n            this.writeUint8(0xFE);\n            this.writeUint32(value);\n        } else {\n            this.writeUint8(0xFF);\n            this.writeUint64(value);\n        }\n    }\n\n    /**\n     * @param {number} value\n     * @returns {number}\n     */\n    static varUintSize(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        if (value < 0xFD) {\n            return 1;\n        } else if (value <= 0xFFFF) {\n            return 3;\n        } else if (value <= 0xFFFFFFFF) {\n            return 5;\n        } else {\n            return 9;\n        }\n    }\n\n    /**\n     * @return {number}\n     */\n    readFloat64() {\n        const value = this._view.getFloat64(this._readPos);\n        this._readPos += 8;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeFloat64(value) {\n        this._view.setFloat64(this._writePos, value);\n        this._writePos += 8;\n    }\n\n    /**\n     * @param {number} length\n     * @return {string}\n     */\n    readString(length) {\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n\n    /**\n     * @param {string} value\n     * @param {number} length\n     */\n    writeString(value, length) {\n        if (StringUtils.isMultibyte(value) || value.length !== length) throw 'Malformed value/length';\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n    }\n\n    /**\n     * @param {number} length\n     * @return {string}\n     */\n    readPaddedString(length) {\n        const bytes = this.read(length);\n        let i = 0;\n        while (i < length && bytes[i] !== 0x0) i++;\n        const view = new Uint8Array(bytes.buffer, bytes.byteOffset, i);\n        return BufferUtils.toAscii(view);\n    }\n\n    /**\n     * @param {string} value\n     * @param {number} length\n     */\n    writePaddedString(value, length) {\n        if (StringUtils.isMultibyte(value) || value.length > length) throw 'Malformed value/length';\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n        const padding = length - bytes.byteLength;\n        this.write(new Uint8Array(padding));\n    }\n\n    /**\n     * @return {string}\n     */\n    readVarLengthString() {\n        const length = this.readUint8();\n        if (this._readPos + length > this.length) throw 'Malformed length';\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n\n    /**\n     * @param {string} value\n     */\n    writeVarLengthString(value) {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw new Error('Malformed value');\n        const bytes = BufferUtils.fromAscii(value);\n        this.writeUint8(bytes.byteLength);\n        this.write(bytes);\n    }\n\n    /**\n     * @param {string} value\n     * @returns {number}\n     */\n    static varLengthStringSize(value) {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw new Error('Malformed value');\n        return /*length*/ 1 + value.length;\n    }\n}\nClass.register(SerialBuffer);\n","/**\n * @interface\n */\nclass MinerWorker {\n    /**\n     * @param blockHeader\n     * @param compact\n     * @param minNonce\n     * @param maxNonce\n     * @returns {Promise.<{hash: Uint8Array, nonce: number}|boolean>}\n     */\n    async multiMine(blockHeader, compact, minNonce, maxNonce) {}\n}\nClass.register(MinerWorker);\n","class MinerWorkerImpl extends IWorker.Stub(MinerWorker) {\n    constructor() {\n        super();\n        // FIXME: This is needed for Babel to work correctly. Can be removed as soon as we updated to Babel v7.\n        this._superInit = super.init;\n    }\n\n    async init(name) {\n        await this._superInit.call(this, name);\n        await WasmHelper.doImportBrowser();\n    }\n\n    async multiMine(input, compact, minNonce, maxNonce) {\n        const hash = new Uint8Array(32);\n        let wasmOut, wasmIn;\n        try {\n            wasmOut = Module._malloc(hash.length);\n            wasmIn = Module._malloc(input.length);\n            Module.HEAPU8.set(input, wasmIn);\n            const nonce = Module._nimiq_argon2_target(wasmOut, wasmIn, input.length, compact, minNonce, maxNonce, 512);\n            if (nonce === maxNonce) return false;\n            hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hash.length));\n            return {hash, nonce};\n        } catch (e) {\n            Log.w(MinerWorkerImpl, e);\n            throw e;\n        } finally {\n            if (wasmOut !== undefined) Module._free(wasmOut);\n            if (wasmIn !== undefined) Module._free(wasmIn);\n        }\n    }\n}\n\nIWorker.prepareForWorkerUse(MinerWorker, new MinerWorkerImpl());\n","/**\n *\n */\nclass MinerWorkerPool extends IWorker.Pool(MinerWorker) {\n    constructor(size = 1) {\n        super((name) => IWorker.startWorkerForProxy(MinerWorker, name), 'miner', size);\n        /** @type {boolean} */\n        this._miningEnabled = false;\n        /** @type {Array.<{minNonce: number, maxNonce: number}>} */\n        this._activeNonces = [];\n        /** @type {Block} */\n        this._block = null;\n        /** @type {number} */\n        this._noncesPerRun = 256;\n        /** @type {Observable} */\n        this._observable = new Observable();\n        /** @type {number} */\n        this._shareCompact = Policy.BLOCK_TARGET_MAX;\n        /** @type {number} */\n        this._runsPerCycle = Infinity;\n        /** @type {number} */\n        this._cycleWait = 100;\n\n        // FIXME: This is needed for Babel to work correctly. Can be removed as soon as we updated to Babel v7.\n        this._superUpdateToSize = super._updateToSize;\n\n        if (PlatformUtils.isNodeJs()) {\n            /**\n             * @param {SerialBuffer} blockHeader\n             * @param {number} compact\n             * @param {number} minNonce\n             * @param {number} maxNonce\n             * @returns {Promise.<{hash: Uint8Array, nonce: number}|boolean>}\n             */\n            this.multiMine = function (blockHeader, compact, minNonce, maxNonce) {\n                return new Promise((resolve, fail) => {\n                    NodeNative.node_argon2_target_async(async (nonce) => {\n                        try {\n                            if (nonce === maxNonce) {\n                                resolve(false);\n                            } else {\n                                blockHeader.writePos -= 4;\n                                blockHeader.writeUint32(nonce);\n                                const hash = await (await CryptoWorker.getInstanceAsync()).computeArgon2d(blockHeader);\n                                resolve({hash, nonce});\n                            }\n                        } catch (e) {\n                            fail(e);\n                        }\n                    }, blockHeader, compact, minNonce, maxNonce, 512);\n                });\n            };\n        }\n    }\n\n    /**\n     * @type {number}\n     */\n    get noncesPerRun() {\n        return this._noncesPerRun;\n    }\n\n    /**\n     * @param {number} nonces\n     */\n    set noncesPerRun(nonces) {\n        this._noncesPerRun = nonces;\n    }\n\n    /**\n     * @type {number}\n     */\n    get runsPerCycle() {\n        return this._runsPerCycle;\n    }\n\n    /**\n     * @param {number} runsPerCycle\n     */\n    set runsPerCycle(runsPerCycle) {\n        this._runsPerCycle = runsPerCycle;\n    }\n\n    /**\n     * @type {number}\n     */\n    get cycleWait() {\n        return this._cycleWait;\n    }\n\n    /**\n     * @param {number} cycleWait\n     */\n    set cycleWait(cycleWait) {\n        this._cycleWait = cycleWait;\n    }\n\n    /**\n     * @param {string} type\n     * @param {Function} callback\n     * @return {number}\n     */\n    on(type, callback) { this._observable.on(type, callback); }\n\n    /**\n     * @param {string} type\n     * @param {number} id\n     */\n    off(type, id) { this._observable.off(type, id); }\n\n    /**\n     * @param {Block} block\n     * @param {number} [shareCompact] target of a share, in compact format.\n     */\n    async startMiningOnBlock(block, shareCompact) {\n        this._block = block;\n        this._shareCompact = shareCompact || block.nBits;\n        if (!this._miningEnabled) {\n            await this._updateToSize();\n            this._activeNonces = [];\n            this._miningEnabled = true;\n            for (let i = 0; i < this.poolSize; ++i) {\n                this._startMiner();\n            }\n        } else {\n            this._activeNonces = [{minNonce:0, maxNonce:0}];\n        }\n    }\n\n    stop() {\n        this._miningEnabled = false;\n    }\n\n    async _updateToSize() {\n        if (!PlatformUtils.isNodeJs()) {\n            await this._superUpdateToSize.call(this);\n        }\n\n        while (this._miningEnabled && this._activeNonces.length < this.poolSize) {\n            this._startMiner();\n        }\n    }\n\n    _startMiner() {\n        if (this._activeNonces.length >= this.poolSize) {\n            return;\n        }\n\n        const minNonce = this._activeNonces.length === 0 ? 0 : Math.max.apply(null, this._activeNonces.map((a) => a.maxNonce));\n        const maxNonce = minNonce + this._noncesPerRun;\n        const nonceRange = {minNonce, maxNonce};\n        this._activeNonces.push(nonceRange);\n        this._singleMiner(nonceRange).catch((e) => Log.e(MinerWorkerPool, e));\n    }\n\n    /**\n     * @param {{minNonce: number, maxNonce: number}} nonceRange\n     * @return {Promise.<void>}\n     * @private\n     */\n    async _singleMiner(nonceRange) {\n        let i = 0;\n        while (this._miningEnabled && (IWorker.areWorkersAsync || PlatformUtils.isNodeJs() || i === 0) && i < this._runsPerCycle) {\n            i++;\n            const block = this._block;\n            const result = await this.multiMine(block.header.serialize(), this._shareCompact, nonceRange.minNonce, nonceRange.maxNonce);\n            if (result) {\n                const hash = new Hash(result.hash);\n                this._observable.fire('share', {\n                    block,\n                    nonce: result.nonce,\n                    hash\n                });\n            } else {\n                this._observable.fire('no-share', {\n                    nonce: nonceRange.maxNonce\n                });\n            }\n            if (this._activeNonces.length > this.poolSize) {\n                this._activeNonces.splice(this._activeNonces.indexOf(nonceRange), 1);\n                return;\n            } else {\n                const newMin = Math.max.apply(null, this._activeNonces.map((a) => a.maxNonce));\n                const newRange = {minNonce: newMin, maxNonce: newMin + this._noncesPerRun};\n                this._activeNonces.splice(this._activeNonces.indexOf(nonceRange), 1, newRange);\n                nonceRange = newRange;\n            }\n        }\n        if (this._miningEnabled) {\n            setTimeout(() => this._singleMiner(nonceRange), this._cycleWait);\n        }\n    }\n}\n\nClass.register(MinerWorkerPool);\n","class GenesisConfig {}\nClass.register(GenesisConfig);\n","class ArrayUtils {\n    /**\n     * @template T\n     * @param {Array.<T>} arr\n     * @return {T}\n     */\n    static randomElement(arr) {\n        return arr[Math.floor(Math.random() * arr.length)];\n    }\n\n    /**\n     * @param {Uint8Array} uintarr\n     * @param {number} begin\n     * @param {number} end\n     * @return {Uint8Array}\n     */\n    static subarray(uintarr, begin, end) {\n        function clamp(v, min, max) { return v < min ? min : v > max ? max : v; }\n\n        if (begin === undefined) { begin = 0; }\n        if (end === undefined) { end = uintarr.byteLength; }\n\n        begin = clamp(begin, 0, uintarr.byteLength);\n        end = clamp(end, 0, uintarr.byteLength);\n\n        let len = end - begin;\n        if (len < 0) {\n            len = 0;\n        }\n\n        return new Uint8Array(uintarr.buffer, uintarr.byteOffset + begin, len);\n    }\n\n    /**\n     * @param {Array} list\n     * @param {number} k\n     * @return {Generator}\n     */\n    static *k_combinations(list, k) {\n        const n = list.length;\n        // Shortcut:\n        if (k > n) {\n            return;\n        }\n        const indices = Array.from(new Array(k), (x,i) => i);\n        yield indices.map(i => list[i]);\n        const reverseRange = Array.from(new Array(k), (x,i) => k-i-1);\n        /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n        while (true) {\n            let i = k-1, found = false;\n            for (i of reverseRange) {\n                if (indices[i] !== i + n - k) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return;\n            }\n            indices[i] += 1;\n            for (const j of Array.from(new Array(k-i-1), (x,k) => i+k+1)) {\n                indices[j] = indices[j-1] + 1;\n            }\n            yield indices.map(i => list[i]);\n        }\n    }\n}\nClass.register(ArrayUtils);\n","class Assert {\n    /**\n     * @param {boolean} condition\n     * @param {string} [message]\n     * @returns {void}\n     */\n    static that(condition, message = 'Assertion failed') {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n}\nClass.register(Assert);\n","class MerkleTree {\n    /**\n     * @param {Array} values\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {Hash}\n     */\n    static computeRoot(values, fnHash = MerkleTree._hash) {\n        return MerkleTree._computeRoot(values, fnHash);\n    }\n\n    /**\n     * @param {Array} values\n     * @param {function(o: *):Hash} fnHash\n     * @returns {Hash}\n     * @private\n     */\n    static _computeRoot(values, fnHash) {\n        const len = values.length;\n        if (len === 0) {\n            return Hash.light(new Uint8Array(0));\n        }\n        if (len === 1) {\n            return fnHash(values[0]);\n        }\n\n        const mid = Math.round(len / 2);\n        const left = values.slice(0, mid);\n        const right = values.slice(mid);\n        const leftHash = MerkleTree._computeRoot(left, fnHash);\n        const rightHash = MerkleTree._computeRoot(right, fnHash);\n        return Hash.light(BufferUtils.concatTypedArrays(leftHash.serialize(), rightHash.serialize()));\n    }\n\n    /**\n     * @param {Hash|Uint8Array|{hash: function():Hash}|{serialize: function():Uint8Array}} o\n     * @returns {Hash}\n     * @private\n     */\n    static _hash(o) {\n        if (o instanceof Hash) {\n            return o;\n        }\n        if (typeof o.hash === 'function') {\n            return o.hash();\n        }\n        if (typeof o.serialize === 'function') {\n            return Hash.light(o.serialize());\n        }\n        if (o instanceof Uint8Array) {\n            return Hash.light(o);\n        }\n        throw new Error('MerkleTree objects must be Uint8Array or have a .hash()/.serialize() method');\n    }\n}\nClass.register(MerkleTree);\n","class MerklePath {\n    /**\n     * @param {Array.<MerklePathNode>} nodes\n     */\n    constructor(nodes) {\n        if (!Array.isArray(nodes) || !NumberUtils.isUint8(nodes.length)\n            || nodes.some(it => !(it instanceof MerklePathNode))) throw new Error('Malformed nodes');\n        /**\n         * @type {Array.<MerklePathNode>}\n         * @private\n         */\n        this._nodes = nodes;\n    }\n\n    /**\n     * @param {Array} values\n     * @param {*} leafValue\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {MerklePath}\n     */\n    static compute(values, leafValue, fnHash = MerkleTree._hash) {\n        const leafHash = fnHash(leafValue);\n        const path = [];\n        MerklePath._compute(values, leafHash, path, fnHash);\n        return new MerklePath(path);\n    }\n\n    /**\n     * @param {Array} values\n     * @param {Hash} leafHash\n     * @param {Array.<MerklePathNode>} path\n     * @param {function(o: *):Hash} fnHash\n     * @returns {{containsLeaf:boolean, inner:Hash}}\n     * @private\n     */\n    static _compute(values, leafHash, path, fnHash) {\n        const len = values.length;\n        let hash;\n        if (len === 0) {\n            hash = Hash.light(new Uint8Array(0));\n            return {containsLeaf: false, inner: hash};\n        }\n        if (len === 1) {\n            hash = fnHash(values[0]);\n            return {containsLeaf: hash.equals(leafHash), inner: hash};\n        }\n\n        const mid = Math.round(len / 2);\n        const left = values.slice(0, mid);\n        const right = values.slice(mid);\n        const {containsLeaf: leftLeaf, inner: leftHash} = MerklePath._compute(left, leafHash, path, fnHash);\n        const {containsLeaf: rightLeaf, inner: rightHash} = MerklePath._compute(right, leafHash, path, fnHash);\n        hash = Hash.light(BufferUtils.concatTypedArrays(leftHash.serialize(), rightHash.serialize()));\n\n        if (leftLeaf) {\n            path.push(new MerklePathNode(rightHash, false));\n            return {containsLeaf: true, inner: hash};\n        } else if (rightLeaf) {\n            path.push(new MerklePathNode(leftHash, true));\n            return {containsLeaf: true, inner: hash};\n        }\n\n        return {containsLeaf: false, inner: hash};\n    }\n\n    /**\n     * @param {*} leafValue\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {Hash}\n     */\n    computeRoot(leafValue, fnHash = MerkleTree._hash) {\n        /** @type {Hash} */\n        let root = fnHash(leafValue);\n        for (const node of this._nodes) {\n            const left = node.left;\n            const hash = node.hash;\n            const concat = new SerialBuffer(hash.serializedSize * 2);\n            if (left) hash.serialize(concat);\n            root.serialize(concat);\n            if (!left) hash.serialize(concat);\n            root = Hash.light(concat);\n        }\n        return root;\n    }\n\n    /**\n     * @param {Array.<MerklePathNode>} nodes\n     * @returns {Uint8Array}\n     * @private\n     */\n    static _compress(nodes) {\n        const count = nodes.length;\n        const leftBitsSize = Math.ceil(count / 8);\n        const leftBits = new Uint8Array(leftBitsSize);\n\n        for (let i = 0; i < count; i++) {\n            if (nodes[i].left) {\n                leftBits[Math.floor(i / 8)] |= 0x80 >>> (i % 8);\n            }\n        }\n\n        return leftBits;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {MerklePath}\n     */\n    static unserialize(buf) {\n        const count = buf.readUint8();\n        const leftBitsSize = Math.ceil(count / 8);\n        const leftBits = buf.read(leftBitsSize);\n\n        const nodes = [];\n        for (let i = 0; i < count; i++) {\n            const left = (leftBits[Math.floor(i / 8)] & (0x80 >>> (i % 8))) !== 0;\n            const hash = Hash.unserialize(buf);\n            nodes.push(new MerklePathNode(hash, left));\n        }\n        return new MerklePath(nodes);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._nodes.length);\n        buf.write(MerklePath._compress(this._nodes));\n\n        for (const node of this._nodes) {\n            node.hash.serialize(buf);\n        }\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        const leftBitsSize = Math.ceil(this._nodes.length / 8);\n        return /*count*/ 1\n            + leftBitsSize\n            + this._nodes.reduce((sum, node) => sum + node.hash.serializedSize, 0);\n    }\n\n    /**\n     * @param {MerklePath} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof MerklePath\n            && this._nodes.length === o._nodes.length\n            && this._nodes.every((node, i) => node.equals(o._nodes[i]));\n    }\n\n    /** @type {Array.<MerklePathNode>} */\n    get nodes() {\n        return this._nodes;\n    }\n}\nClass.register(MerklePath);\n\nclass MerklePathNode {\n    /**\n     * @param {Hash} hash\n     * @param {boolean} left\n     */\n    constructor(hash, left) {\n        this._hash = hash;\n        this._left = left;\n    }\n\n    /** @type {Hash} */\n    get hash() {\n        return this._hash;\n    }\n\n    /** @type {boolean} */\n    get left() {\n        return this._left;\n    }\n\n    /**\n     * @param {MerklePathNode} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof MerklePathNode\n            && this._hash.equals(o.hash)\n            && this._left === o.left;\n    }\n}\nClass.register(MerklePathNode);\n","class Policy {\n    /**\n     * Convert Nimiq decimal to Number of Satoshis.\n     * @param {number} coins Nimiq count in decimal\n     * @return {number} Number of Satoshis\n     */\n    static coinsToSatoshis(coins) {\n        return Math.round(coins * Policy.SATOSHIS_PER_COIN);\n    }\n\n    /**\n     * Convert Number of Satoshis to Nimiq decimal.\n     * @param {number} satoshis Number of Satoshis.\n     * @return {number} Nimiq count in decimal.\n     */\n    static satoshisToCoins(satoshis) {\n        return satoshis / Policy.SATOSHIS_PER_COIN;\n    }\n\n    /**\n     * Circulating supply after block.\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static supplyAfter(blockHeight) {\n        // Calculate last entry in supply cache that is below blockHeight.\n        let startHeight = Math.floor(blockHeight / Policy._supplyCacheInterval) * Policy._supplyCacheInterval;\n        startHeight = Math.max(0, Math.min(startHeight, Policy._supplyCacheMax));\n\n        // Calculate respective block for the last entry of the cache and the targeted height.\n        const startI = startHeight / Policy._supplyCacheInterval;\n        const endI = Math.floor(blockHeight / Policy._supplyCacheInterval);\n\n        // The starting supply is the initial supply at the beginning and a cached value afterwards.\n        let supply = startHeight === 0 ? Policy.INITIAL_SUPPLY : Policy._supplyCache.get(startHeight);\n        // Use and update cache.\n        for (let i = startI; i < endI; ++i) {\n            startHeight = i * Policy._supplyCacheInterval;\n            // Since the cache stores the supply *before* a certain block, subtract one.\n            const endHeight = (i + 1) * Policy._supplyCacheInterval - 1;\n            supply = Policy._supplyAfter(supply, endHeight, startHeight);\n            // Don't forget to add one again.\n            Policy._supplyCache.set(endHeight + 1, supply);\n            Policy._supplyCacheMax = endHeight + 1;\n        }\n\n        // Calculate remaining supply (this also adds the block reward for endI*interval).\n        return Policy._supplyAfter(supply, blockHeight, endI * Policy._supplyCacheInterval);\n    }\n\n    /**\n     * Circulating supply after block.\n     * @param {number} initialSupply\n     * @param {number} blockHeight\n     * @param {number} [startHeight]\n     * @return {number}\n     */\n    static _supplyAfter(initialSupply, blockHeight, startHeight=0) {\n        let supply = initialSupply;\n        for (let i = startHeight; i <= blockHeight; ++i) {\n            supply += Policy._blockRewardAt(supply, i);\n        }\n        return supply;\n    }\n\n    /**\n     * Miner reward per block.\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static blockRewardAt(blockHeight) {\n        const currentSupply = Policy.supplyAfter(blockHeight - 1);\n        return Policy._blockRewardAt(currentSupply, blockHeight);\n    }\n\n    /**\n     * Miner reward per block.\n     * @param {number} currentSupply\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static _blockRewardAt(currentSupply, blockHeight) {\n        if (blockHeight <= 0) return 0;\n        const remaining = Policy.TOTAL_SUPPLY - currentSupply;\n        if (blockHeight >= Policy.EMISSION_TAIL_START && remaining >= Policy.EMISSION_TAIL_REWARD) {\n            return Policy.EMISSION_TAIL_REWARD;\n        }\n        const remainder = remaining % Policy.EMISSION_SPEED;\n        return (remaining - remainder) / Policy.EMISSION_SPEED;\n    }\n}\n\n/**\n * Targeted block time in seconds.\n * @type {number}\n * @constant\n */\nPolicy.BLOCK_TIME = 60;\n\n/**\n * Maximum block size in bytes.\n * @type {number}\n * @constant\n */\nPolicy.BLOCK_SIZE_MAX = 1e5; // 100 kb\n\n/**\n * The highest (easiest) block PoW target.\n * @type {BigNumber}\n * @constant\n */\nPolicy.BLOCK_TARGET_MAX = new BigNumber(2).pow(240);\n\n/**\n * Number of blocks we take into account to calculate next difficulty.\n * @type {number}\n * @constant\n */\nPolicy.DIFFICULTY_BLOCK_WINDOW = 120;\n\n/**\n * Limits the rate at which the difficulty is adjusted min/max.\n * @type {number}\n * @constant\n */\nPolicy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR = 2;\n\n/**\n * Number of blocks a transaction is valid.\n * @type {number}\n * @constant\n */\nPolicy.TRANSACTION_VALIDITY_WINDOW = 120;\n\n\n/* Supply & Emission Parameters */\n\n/**\n * Number of Satoshis per Nimiq.\n * @type {number}\n * @constant\n */\nPolicy.SATOSHIS_PER_COIN = 1e5;\n\n/**\n * Targeted total supply in satoshis.\n * @type {number}\n * @constant\n */\nPolicy.TOTAL_SUPPLY = 21e14;\n\n/**\n * Initial supply before genesis block in satoshis.\n * FIXME: Change for main net.\n * @type {number}\n * @constant\n */\nPolicy.INITIAL_SUPPLY = 252000000000000;\n\n/**\n * Emission speed.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_SPEED = Math.pow(2, 22);\n\n/**\n * First block using constant tail emission until total supply is reached.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_TAIL_START = 48692960;\n\n/**\n * Constant tail emission in satoshis until total supply is reached.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_TAIL_REWARD = 4000;\n\n/* Security parameters */\n\n/**\n * NIPoPoW Security parameter M\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.M = 240;\n\n/**\n * NIPoPoW Security parameter K\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.K = 120;\n\n/**\n * NIPoPoW Security parameter DELTA\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.DELTA = 0.15;\n\n/**\n * Number of blocks the light client downloads to verify the AccountsTree construction.\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.NUM_BLOCKS_VERIFICATION = 250;\n\n\n/* Snapshot Parameters */\n\n/**\n * Maximum number of snapshots.\n * @type {number}\n * @constant\n */\nPolicy.NUM_SNAPSHOTS_MAX = 20;\n\n\n/**\n * Stores the circulating supply before the given block.\n * @type {Map.<number, number>}\n * @private\n */\nPolicy._supplyCache = new Map();\nPolicy._supplyCacheMax = 0; // blocks\nPolicy._supplyCacheInterval = 5000; // blocks\nClass.register(Policy);\n","/**\n * @abstract\n */\nclass Serializable {\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Serializable && BufferUtils.equals(this.serialize(), o.serialize());\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {number} negative if this is smaller than o, positive if this is larger than o, zero if equal.\n     */\n    compare(o) {\n        return BufferUtils.compare(this.serialize(), o.serialize());\n    }\n\n    hashCode() {\n        return this.toBase64();\n    }\n\n    /**\n     * @abstract\n     * @param {SerialBuffer} [buf]\n     */\n    serialize(buf) {}\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return this.toBase64();\n    }\n\n    /**\n     * @return {string}\n     */\n    toBase64() {\n        return BufferUtils.toBase64(this.serialize());\n    }\n\n    /**\n     * @return {string}\n     */\n    toHex() {\n        return BufferUtils.toHex(this.serialize());\n    }\n}\n\nClass.register(Serializable);\n","class Hash extends Serializable {\n    /**\n     * @param {?Uint8Array} arg\n     * @param {Hash.Algorithm} [algorithm]\n     * @private\n     */\n    constructor(arg, algorithm = Hash.Algorithm.BLAKE2B) {\n        if (arg === null) {\n            arg = new Uint8Array(Hash.getSize(algorithm));\n        } else {\n            if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n            if (arg.length !== Hash.getSize(algorithm)) throw new Error('Primitive: Invalid length');\n        }\n        super();\n        this._obj = arg;\n        /** @type {Hash.Algorithm} */\n        this._algorithm = algorithm;\n    }\n\n    /**\n     * @deprecated\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static light(arr) {\n        return Hash.blake2b(arr);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static blake2b(arr) {\n        return new Hash(Hash.computeBlake2b(arr), Hash.Algorithm.BLAKE2B);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @deprecated\n     * @returns {Promise.<Hash>}\n     */\n    static hard(arr) {\n        return Hash.argon2d(arr);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Promise.<Hash>}\n     */\n    static async argon2d(arr) {\n        return new Hash(await (await CryptoWorker.getInstanceAsync()).computeArgon2d(arr), Hash.Algorithm.ARGON2D);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static sha256(arr) {\n        return new Hash(Hash.computeSha256(arr), Hash.Algorithm.SHA256);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @param {Hash.Algorithm} algorithm\n     * @returns {Hash}\n     */\n    static compute(arr, algorithm) {\n        // !! The algorithms supported by this function are the allowed hash algorithms for HTLCs !!\n        switch (algorithm) {\n            case Hash.Algorithm.BLAKE2B: return Hash.blake2b(arr);\n            case Hash.Algorithm.SHA256: return Hash.sha256(arr);\n            // Hash.Algorithm.ARGON2 intentionally omitted\n            default: throw new Error('Invalid hash algorithm');\n        }\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @param {Hash.Algorithm} [algorithm]\n     * @returns {Hash}\n     */\n    static unserialize(buf, algorithm = Hash.Algorithm.BLAKE2B) {\n        return new Hash(buf.read(Hash.getSize(algorithm)), algorithm);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /**\n     * @param {number} begin\n     * @param {number} end\n     * @returns {Uint8Array}\n     */\n    subarray(begin, end) {\n        return this._obj.subarray(begin, end);\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Hash.SIZE.get(this._algorithm);\n    }\n\n    /** @type {Uint8Array} */\n    get array() {\n        return this._obj;\n    }\n\n    /** @type {Hash.Algorithm} */\n    get algorithm() {\n        return this._algorithm;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof Hash && o._algorithm === this._algorithm && super.equals(o);\n    }\n\n    /**\n     * @param {string} base64\n     * @returns {Hash}\n     */\n    static fromBase64(base64) {\n        return new Hash(BufferUtils.fromBase64(base64));\n    }\n\n    /**\n     * @param {string} hex\n     * @returns {Hash}\n     */\n    static fromHex(hex) {\n        return new Hash(BufferUtils.fromHex(hex));\n    }\n\n    /**\n     * @param {string} str\n     * @returns {Hash}\n     */\n    static fromString(str) {\n        try {\n            return Hash.fromHex(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Hash.fromBase64(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        throw new Error('Invalid hash format');\n    }\n\n    /**\n     * @param {Hash} o\n     * @returns {boolean}\n     */\n    static isHash(o) {\n        return o instanceof Hash;\n    }\n\n    /**\n     * @param {Hash.Algorithm} algorithm\n     * @returns {number}\n     */\n    static getSize(algorithm) {\n        const size = Hash.SIZE.get(algorithm);\n        if (typeof size !== 'number') throw new Error('Invalid hash algorithm');\n        return size;\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeBlake2b(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.BLAKE2B));\n            NodeNative.node_blake2(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.BLAKE2B);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                const res = Module._nimiq_blake2(wasmOut, wasmIn, input.length);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeSha256(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA256));\n            NodeNative.node_sha256(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA256);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                Module._nimiq_sha256(wasmOut, wasmIn, input.length);\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\n/**\n * @enum {number}\n */\nHash.Algorithm = {\n    BLAKE2B: 1,\n    ARGON2D: 2,\n    SHA256: 3,\n    SHA512: 4\n};\n/**\n * @type {Map<Hash.Algorithm, number>}\n */\nHash.SIZE = new Map();\nHash.SIZE.set(Hash.Algorithm.BLAKE2B, 32);\nHash.SIZE.set(Hash.Algorithm.ARGON2D, 32);\nHash.SIZE.set(Hash.Algorithm.SHA256, 32);\nHash.SIZE.set(Hash.Algorithm.SHA512, 64);\n\nHash.NULL = new Hash(new Uint8Array(32));\nClass.register(Hash);\n","class PublicKey extends Serializable {\n    /**\n     * @param {PublicKey} o\n     * @returns {PublicKey}\n     */\n    static copy(o) {\n        if (!o) return o;\n        return new PublicKey(new Uint8Array(o._obj));\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PublicKey.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @return {PublicKey}\n     */\n    static derive(privateKey) {\n        return new PublicKey(PublicKey._publicKeyDerive(privateKey._obj));\n    }\n\n    /**\n     * @param {Array.<PublicKey>} publicKeys\n     * @return {PublicKey}\n     */\n    static sum(publicKeys) {\n        publicKeys = publicKeys.slice();\n        publicKeys.sort((a, b) => a.compare(b));\n        return PublicKey._delinearizeAndAggregatePublicKeys(publicKeys);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {PublicKey}\n     */\n    static unserialize(buf) {\n        return new PublicKey(buf.read(PublicKey.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return PublicKey.SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof PublicKey && super.equals(o);\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        return Hash.light(this.serialize());\n    }\n\n    /**\n     * @param {PublicKey} o\n     * @return {number}\n     */\n    compare(o) {\n        return BufferUtils.compare(this._obj, o._obj);\n    }\n\n    /**\n     * @return {Address}\n     */\n    toAddress() {\n        return Address.fromHash(this.hash());\n    }\n\n    /**\n     * @return {PeerId}\n     */\n    toPeerId() {\n        return new PeerId(this.hash().subarray(0, 16));\n    }\n\n    /**\n     * @param {Array.<PublicKey>} publicKeys\n     * @returns {PublicKey}\n     */\n    static _delinearizeAndAggregatePublicKeys(publicKeys) {\n        const publicKeysObj = publicKeys.map(k => k.serialize());\n        const publicKeysHash = PublicKey._publicKeysHash(publicKeysObj);\n        const raw = PublicKey._publicKeysDelinearizeAndAggregate(publicKeysObj, publicKeysHash);\n        return new PublicKey(raw);\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @returns {Uint8Array}\n     */\n    static _publicKeyDerive(privateKey) {\n        if (privateKey.byteLength !== PrivateKey.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_public_key_derive(out, new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const pubKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmOut, PrivateKey.SIZE);\n                pubKeyBuffer.set(privateKey);\n                const wasmIn = Module.stackAlloc(privateKey.length);\n                const privKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmIn, PrivateKey.SIZE);\n                privKeyBuffer.set(privateKey);\n\n                Module._ed25519_public_key_derive(wasmOut, wasmIn);\n                privKeyBuffer.fill(0);\n                const publicKey = new Uint8Array(PublicKey.SIZE);\n                publicKey.set(pubKeyBuffer);\n                return publicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @returns {Uint8Array}\n     */\n    static _publicKeysHash(publicKeys) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA512));\n            NodeNative.node_ed25519_hash_public_keys(out, concatenatedPublicKeys, publicKeys.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA512);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                Module._ed25519_hash_public_keys(wasmOut, wasmInPublicKeys, publicKeys.length);\n                const hashedPublicKey = new Uint8Array(hashSize);\n                hashedPublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hashedPublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _publicKeyDelinearize(publicKey, publicKeysHash) {\n        if (publicKey.byteLength !== PublicKey.SIZE\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_delinearize_public_key(out, new Uint8Array(publicKeysHash), new Uint8Array(publicKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPublicKey = Module.stackAlloc(publicKey.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKey, publicKey.length).set(publicKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_delinearize_public_key(wasmOut, wasmInPublicKeysHash, wasmInPublicKey);\n                const delinearizedPublicKey = new Uint8Array(PublicKey.SIZE);\n                delinearizedPublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return delinearizedPublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _publicKeysDelinearizeAndAggregate(publicKeys, publicKeysHash) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_aggregate_delinearized_public_keys(out, new Uint8Array(publicKeysHash), concatenatedPublicKeys, publicKeys.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_aggregate_delinearized_public_keys(wasmOut, wasmInPublicKeysHash, wasmInPublicKeys, publicKeys.length);\n                const aggregatePublicKey = new Uint8Array(PublicKey.SIZE);\n                aggregatePublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return aggregatePublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nPublicKey.SIZE = 32;\n\nClass.register(PublicKey);\n","class Signature extends Serializable {\n    /**\n     * @param {Signature} o\n     * @returns {Signature}\n     */\n    static copy(o) {\n        if (!o) return o;\n        // FIXME Move this to Crypto class.\n        const obj = new Uint8Array(o._obj);\n        return new Signature(obj);\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Signature.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} data\n     * @return {Signature}\n     */\n    static create(privateKey, publicKey, data) {\n        return new Signature(Signature._signatureCreate(privateKey._obj, publicKey._obj, data));\n    }\n\n    /**\n     * @param {Commitment} commitment\n     * @param {Array.<PartialSignature>} signatures\n     * @return {Signature}\n     */\n    static fromPartialSignatures(commitment, signatures) {\n        const raw = Signature._combinePartialSignatures(commitment.serialize(), signatures.map(s => s.serialize()));\n        return new Signature(raw);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Signature}\n     */\n    static unserialize(buf) {\n        return new Signature(buf.read(Signature.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Signature.SIZE;\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} data\n     * @return {boolean}\n     */\n    verify(publicKey, data) {\n        return Signature._signatureVerify(publicKey._obj, data, this._obj);\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Signature && super.equals(o);\n    }\n\n    /**\n     * @param {Uint8Array} combinedCommitment\n     * @param {Array.<Uint8Array>} partialSignatures\n     * @returns {Uint8Array}\n     */\n    static _combinePartialSignatures(combinedCommitment, partialSignatures) {\n        const combinedSignature = Signature._aggregatePartialSignatures(partialSignatures);\n        return BufferUtils.concatTypedArrays(combinedCommitment, combinedSignature);\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} partialSignatures\n     * @returns {Uint8Array}\n     */\n    static _aggregatePartialSignatures(partialSignatures) {\n        return partialSignatures.reduce((sigA, sigB) => Signature._scalarsAdd(sigA, sigB));\n    }\n\n    /**\n     * @param {Uint8Array} a\n     * @param {Uint8Array} b\n     * @returns {Uint8Array}\n     */\n    static _scalarsAdd(a, b) {\n        if (a.byteLength !== PartialSignature.SIZE || b.byteLength !== PartialSignature.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PartialSignature.SIZE);\n            NodeNative.node_ed25519_add_scalars(out, new Uint8Array(a), new Uint8Array(b));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutSum = Module.stackAlloc(PartialSignature.SIZE);\n                const wasmInA = Module.stackAlloc(a.length);\n                const wasmInB = Module.stackAlloc(b.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInA, a.length).set(a);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInB, b.length).set(b);\n                Module._ed25519_add_scalars(wasmOutSum, wasmInA, wasmInB);\n                const sum = new Uint8Array(PartialSignature.SIZE);\n                sum.set(new Uint8Array(Module.HEAPU8.buffer, wasmOutSum, PartialSignature.SIZE));\n                return sum;\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} message\n     * @returns {Uint8Array}\n     */\n    static _signatureCreate(privateKey, publicKey, message) {\n        if (publicKey.byteLength !== PublicKey.SIZE\n            || privateKey.byteLength !== PrivateKey.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Signature.SIZE);\n            NodeNative.node_ed25519_sign(out, new Uint8Array(message), new Uint8Array(publicKey), new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutSignature = Module.stackAlloc(Signature.SIZE);\n                const signatureBuffer = new Uint8Array(Module.HEAP8.buffer, wasmOutSignature, Signature.SIZE);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInMessage, message.length).set(message);\n                const wasmInPubKey = Module.stackAlloc(publicKey.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInPubKey, publicKey.length).set(publicKey);\n                const wasmInPrivKey = Module.stackAlloc(privateKey.length);\n                const privKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmInPrivKey, privateKey.length);\n                privKeyBuffer.set(privateKey);\n\n                Module._ed25519_sign(wasmOutSignature, wasmInMessage, message.byteLength, wasmInPubKey, wasmInPrivKey);\n                privKeyBuffer.fill(0);\n\n                const signature = new Uint8Array(Signature.SIZE);\n                signature.set(signatureBuffer);\n                return signature;\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} message\n     * @param {Uint8Array} signature\n     * @returns {boolean}\n     */\n    static _signatureVerify(publicKey, message, signature) {\n        if (PlatformUtils.isNodeJs()) {\n            return !!NodeNative.node_ed25519_verify(new Uint8Array(signature), new Uint8Array(message), new Uint8Array(publicKey));\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmInPubKey = Module.stackAlloc(publicKey.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInPubKey, publicKey.length).set(publicKey);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInMessage, message.length).set(message);\n                const wasmInSignature = Module.stackAlloc(signature.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInSignature, signature.length).set(signature);\n\n                return !!Module._ed25519_verify(wasmInSignature, wasmInMessage, message.byteLength, wasmInPubKey);\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nSignature.SIZE = 64;\n\nClass.register(Signature);\n","class Address extends Serializable {\n    /**\n     * @param {Address} o\n     * @returns {Address}\n     */\n    static copy(o) {\n        if (!o) return o;\n        const obj = new Uint8Array(o._obj);\n        return new Address(obj);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {Address}\n     */\n    static fromHash(hash) {\n        return new Address(hash.subarray(0, Address.SERIALIZED_SIZE));\n    }\n\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Address.SERIALIZED_SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * Create Address object from binary form.\n     * @param {SerialBuffer} buf Buffer to read from.\n     * @return {Address} Newly created Account object.\n     */\n    static unserialize(buf) {\n        return new Address(buf.read(Address.SERIALIZED_SIZE));\n    }\n\n    /**\n     * Serialize this Address object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    subarray(begin, end) {\n        return this._obj.subarray(begin, end);\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        return Address.SERIALIZED_SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Address\n            && super.equals(o);\n    }\n\n    static fromString(str) {\n        try {\n            return Address.fromUserFriendlyAddress(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Address.fromHex(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Address.fromBase64(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        throw new Error('Invalid address format');\n    }\n\n    /**\n     * @param {string} base64\n     * @return {Address}\n     */\n    static fromBase64(base64) {\n        return new Address(BufferUtils.fromBase64(base64));\n    }\n\n    /**\n     * @param {string} hex\n     * @return {Address}\n     */\n    static fromHex(hex) {\n        return new Address(BufferUtils.fromHex(hex));\n    }\n\n    /**\n     * @param {string} str\n     * @return {Address}\n     */\n    static fromUserFriendlyAddress(str) {\n        str = str.replace(/ /g, '');\n        if (str.substr(0, 2).toUpperCase() !== Address.CCODE) {\n            throw new Error('Invalid Address: Wrong country code');\n        }\n        if (str.length !== 36) {\n            throw new Error('Invalid Address: Should be 36 chars (ignoring spaces)');\n        }\n        if (Address._ibanCheck(str.substr(4) + str.substr(0, 4)) !== 1) {\n            throw new Error('Invalid Address: Checksum invalid');\n        }\n        return new Address(BufferUtils.fromBase32(str.substr(4)));\n    }\n\n    static _ibanCheck(str) {\n        const num = str.split('').map((c) => {\n            const code = c.toUpperCase().charCodeAt(0);\n            return code >= 48 && code <= 57 ? c : (code - 55).toString();\n        }).join('');\n        let tmp = '';\n\n        for (let i = 0; i < Math.ceil(num.length / 6); i++) {\n            tmp = (parseInt(tmp + num.substr(i * 6, 6)) % 97).toString();\n        }\n\n        return parseInt(tmp);\n    }\n\n    /**\n     * @param {boolean} [withSpaces]\n     * @return {string}\n     */\n    toUserFriendlyAddress(withSpaces = true) {\n        const base32 = BufferUtils.toBase32(this.serialize());\n        // eslint-disable-next-line prefer-template\n        const check = ('00' + (98 - Address._ibanCheck(base32 + Address.CCODE + '00'))).slice(-2);\n        let res = Address.CCODE + check + base32;\n        if (withSpaces) res = res.replace(/.{4}/g, '$& ').trim();\n        return res;\n    }\n}\nAddress.CCODE = 'NQ';\nAddress.SERIALIZED_SIZE = 20;\nAddress.HEX_SIZE = 40;\nAddress.NULL = new Address(new Uint8Array(Address.SERIALIZED_SIZE));\nAddress.CONTRACT_CREATION = new Address(new Uint8Array(Address.SERIALIZED_SIZE));\nClass.register(Address);\n","/**\n * @abstract\n */\nclass Account {\n    /**\n     * @param {Account.Type} type\n     * @param {number} balance\n     */\n    constructor(type, balance) {\n        if (!NumberUtils.isUint8(type)) throw new Error('Malformed type');\n        if (!NumberUtils.isUint64(balance)) throw new Error('Malformed balance');\n\n        /** @type {Account.Type} */\n        this._type = type;\n        /** @type {number} */\n        this._balance = balance;\n    }\n\n    /**\n     * Create Account object from binary form.\n     * @param {SerialBuffer} buf Buffer to read from.\n     * @return {Account} Newly created Account object.\n     */\n    static unserialize(buf) {\n        const type = /** @type {Account.Type} */ buf.readUint8();\n        buf.readPos--;\n\n        if (!Account.TYPE_MAP.has(type)) {\n            throw new Error('Unknown account type');\n        }\n\n        return Account.TYPE_MAP.get(type).unserialize(buf);\n    }\n\n    /**\n     * Serialize this Account object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._type);\n        buf.writeUint64(this._balance);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return /*type*/ 1\n            + /*balance*/ 8;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return BufferUtils.equals(this.serialize(), o.serialize());\n    }\n\n    toString() {\n        return `Account{type=${this._type}, balance=${this._balance.toString()}`;\n    }\n\n    /**\n     * @type {number} Account balance\n     */\n    get balance() {\n        return this._balance;\n    }\n\n    /** @type {Account.Type} */\n    get type() {\n        return this._type;\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) { throw new Error('Not yet implemented.'); }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        if (!revert) {\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < 0) {\n                throw new Error('Balance Error!');\n            }\n            if (blockHeight < transaction.validityStartHeight\n                || blockHeight >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n                throw new Error('Validity Error!');\n            }\n            if (transactionsCache.containsTransaction(transaction)) {\n                throw new Error('Double Transaction Error!');\n            }\n            return this.withBalance(newBalance);\n        } else {\n            if (blockHeight < transaction.validityStartHeight\n                || blockHeight >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n                throw new Error('Validity Error!');\n            }\n            return this.withBalance(this._balance + transaction.value + transaction.fee);\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert) {\n            return this.withBalance(this._balance + transaction.value);\n        } else {\n            const newBalance = this._balance - transaction.value;\n            if (newBalance < 0) {\n                throw new Error('Balance Error!');\n            }\n            return this.withBalance(newBalance);\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isInitial() {\n        return this === Account.INITIAL;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isToBePruned() {\n        return this._balance === 0 && !this.isInitial();\n    }\n}\n\n/**\n * Enum for Account types.\n * Non-zero values are contracts.\n * @enum\n */\nAccount.Type = {\n    /**\n     * Basic account type.\n     * @see {BasicAccount}\n     */\n    BASIC: 0,\n    /**\n     * Account with vesting functionality.\n     * @see {VestingContract}\n     */\n    VESTING: 1,\n    /**\n     * Hashed Time-Locked Contract\n     * @see {HashedTimeLockedContract}\n     */\n    HTLC: 2\n};\n/**\n * @type {Map.<Account.Type, {copy: function(o: *):Account, unserialize: function(buf: SerialBuffer):Account, create: function(balance: number, blockHeight: number, transaction: Transaction):Account, verifyOutgoingTransaction: function(transaction: Transaction):Promise.<boolean>, verifyIncomingTransaction: function(transaction: Transaction):Promise.<boolean>}>}\n */\nAccount.TYPE_MAP = new Map();\n\nClass.register(Account);\n","class PrunedAccount {\n    /**\n     * @param {Address} address\n     * @param {Account} account\n     */\n    constructor(address, account) {\n        if (!(address instanceof Address)) throw new Error('Malformed address');\n\n        /** @type {Address} */\n        this._address = address;\n        /** @type {Account} */\n        this._account = account;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {PrunedAccount}\n     */\n    static unserialize(buf) {\n        return new PrunedAccount(Address.unserialize(buf), Account.unserialize(buf));\n    }\n\n    /**\n     * @param {PrunedAccount} o\n     * @return {number} negative if this is smaller than o, positive if this is larger than o, zero if equal.\n     */\n    compare(o) {\n        return this._address.compare(o._address);\n    }\n\n    /**\n     * @returns {Address}\n     */\n    get address() {\n        return this._address;\n    }\n\n    /**\n     * @returns {Account}\n     */\n    get account() {\n        return this._account;\n    }\n\n    /**\n     * @param buf\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._address.serialize(buf);\n        this._account.serialize(buf);\n        return this;\n    }\n\n    get serializedSize() {\n        return this._address.serializedSize + this._account.serializedSize;\n    }\n}\n\nClass.register(PrunedAccount);\n","/**\n * This is a classic account that can send all his funds and receive any transaction.\n * All outgoing transactions are signed using the key corresponding to this address.\n */\nclass BasicAccount extends Account {\n    /**\n     * @param {BasicAccount} o\n     * @returns {BasicAccount}\n     */\n    static copy(o) {\n        if (!o) return o;\n        return new BasicAccount(o._balance);\n    }\n\n    /**\n     * @param {number} [balance]\n     */\n    constructor(balance = 0) {\n        super(Account.Type.BASIC, balance);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {BasicAccount}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        if (type !== Account.Type.BASIC) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        return new BasicAccount(balance);\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return o instanceof BasicAccount\n            && this._type === o._type\n            && this._balance === o._balance;\n    }\n\n    toString() {\n        return `BasicAccount{balance=${this._balance}}`;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyOutgoingTransaction(transaction) {\n        return SignatureProof.verifyTransaction(transaction);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        if (transaction.data.byteLength > 64) return false;\n        return true;\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) {\n        return new BasicAccount(balance);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert) {\n            const isContractCreation = transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION);\n            const isTypeChange = transaction.recipientType !== this._type;\n            if (isContractCreation !== isTypeChange) {\n                throw new Error('Data Error!');\n            }\n        }\n        return super.withIncomingTransaction(transaction, blockHeight, revert);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        if (!revert && transaction.recipientType !== this._type && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Contract creation\n            return Account.TYPE_MAP.get(transaction.recipientType).create(this._balance, blockHeight, transaction);\n        }\n        return this;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isInitial() {\n        return this._balance === 0;\n    }\n}\n\nAccount.INITIAL = new BasicAccount(0);\nAccount.TYPE_MAP.set(Account.Type.BASIC, BasicAccount);\nClass.register(BasicAccount);\n","class Contract extends Account {\n    /**\n     * @param {Account.Type} type\n     * @param {number} balance\n     */\n    constructor(type, balance) {\n        super(type, balance);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        if (!transaction.recipient.equals(transaction.getContractCreationAddress())) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Contract already created\n            throw new Error('Data error');\n        }\n        return super.withIncomingTransaction(transaction, blockHeight, revert);\n    }\n\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        if (revert && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Revert contract creation\n            return new BasicAccount(this.balance);\n        }\n        return this;\n    }\n}\n\nClass.register(Contract);\n","class HashedTimeLockedContract extends Contract {\n    /**\n     * @param {number} balance\n     * @param {Address} sender\n     * @param {Address} recipient\n     * @param {Hash} hashRoot\n     * @param {number} hashCount\n     * @param {number} timeout\n     * @param {number} totalAmount\n     */\n    constructor(balance = 0, sender = Address.NULL, recipient = Address.NULL, hashRoot = Hash.NULL, hashCount = 1, timeout = 0, totalAmount = balance) {\n        super(Account.Type.HTLC, balance);\n        if (!(sender instanceof Address)) throw new Error('Malformed address');\n        if (!(recipient instanceof Address)) throw new Error('Malformed address');\n        if (!(hashRoot instanceof Hash)) throw new Error('Malformed address');\n        if (!NumberUtils.isUint8(hashCount) || hashCount === 0) throw new Error('Malformed hashCount');\n        if (!NumberUtils.isUint32(timeout)) throw new Error('Malformed timeout');\n        if (!NumberUtils.isUint64(totalAmount)) throw new Error('Malformed totalAmount');\n\n        /** @type {Address} */\n        this._sender = sender;\n        /** @type {Address} */\n        this._recipient = recipient;\n        /** @type {Hash} */\n        this._hashRoot = hashRoot;\n        /** @type {number} */\n        this._hashCount = hashCount;\n        /** @type {number} */\n        this._timeout = timeout;\n        /** @type {number} */\n        this._totalAmount = totalAmount;\n    }\n\n    /**\n     * @param {number} balance\n     * @param {number} blockHeight\n     * @param {Transaction} transaction\n     */\n    static create(balance, blockHeight, transaction) {\n        const buf = new SerialBuffer(transaction.data);\n\n        const sender = Address.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n        const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n        const hashCount = buf.readUint8();\n        const timeout = buf.readUint32();\n\n        return new HashedTimeLockedContract(balance, sender, recipient, hashRoot, hashCount, timeout);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {HashedTimeLockedContract}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        if (type !== Account.Type.HTLC) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        const sender = Address.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n        const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n        const hashCount = buf.readUint8();\n        const timeout = buf.readUint32();\n        const totalAmount = buf.readUint64();\n        return new HashedTimeLockedContract(balance, sender, recipient, hashRoot, hashCount, timeout, totalAmount);\n    }\n\n\n    /**\n     * Serialize this HTLC object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._sender.serialize(buf);\n        this._recipient.serialize(buf);\n        buf.writeUint8(this._hashRoot.algorithm);\n        this._hashRoot.serialize(buf);\n        buf.writeUint8(this._hashCount);\n        buf.writeUint32(this._timeout);\n        buf.writeUint64(this._totalAmount);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return super.serializedSize\n            + this._sender.serializedSize\n            + this._recipient.serializedSize\n            + /*hashAlgorithm*/ 1\n            + this._hashRoot.serializedSize\n            + /*hashCount*/ 1\n            + /*timeout*/ 4\n            + /*totalAmount*/ 8;\n    }\n\n    /** @type {Address} */\n    get sender() {\n        return this._sender;\n    }\n\n    /** @type {Address} */\n    get recipient() {\n        return this._recipient;\n    }\n\n    /** @type {Hash} */\n    get hashRoot() {\n        return this._hashRoot;\n    }\n\n    /** @type {number} */\n    get hashCount() {\n        return this._hashCount;\n    }\n\n    /** @type {number} */\n    get timeout() {\n        return this._timeout;\n    }\n\n    /** @type {number} */\n    get totalAmount() {\n        return this._totalAmount;\n    }\n\n    toString() {\n        return `HashedTimeLockedContract{balance=${this._balance}, sender=${this._sender.toUserFriendlyAddress(false)}, recipient=${this._sender.toUserFriendlyAddress(false)}, amount=${this._totalAmount}/${this._hashCount}, timeout=${this._timeout}}`;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return o instanceof HashedTimeLockedContract\n            && this._type === o._type\n            && this._balance === o._balance\n            && this._sender.equals(o._sender)\n            && this._recipient.equals(o._recipient)\n            && this._hashRoot.equals(o._hashRoot)\n            && this._hashCount === o._hashCount\n            && this._timeout === o._timeout\n            && this._totalAmount === o._totalAmount;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyOutgoingTransaction(transaction) {\n        try {\n            const buf = new SerialBuffer(transaction.proof);\n            const type = buf.readUint8();\n            switch (type) {\n                case HashedTimeLockedContract.ProofType.REGULAR_TRANSFER: {\n                    const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n                    const hashDepth = buf.readUint8();\n                    const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n                    let preImage = Hash.unserialize(buf, hashAlgorithm);\n\n                    // Verify that the preImage hashed hashDepth times matches the _provided_ hashRoot.\n                    for (let i = 0; i < hashDepth; ++i) {\n                        preImage = Hash.compute(preImage.array, hashAlgorithm);\n                    }\n                    if (!hashRoot.equals(preImage)) {\n                        return false;\n                    }\n\n                    // Signature proof of the HTLC recipient\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                }\n                case HashedTimeLockedContract.ProofType.EARLY_RESOLVE: {\n                    // Signature proof of the HTLC recipient\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n\n                    // Signature proof of the HTLC creator\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                }\n                case HashedTimeLockedContract.ProofType.TIMEOUT_RESOLVE:\n                    // Signature proof of the HTLC creator\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                default:\n                    return false;\n            }\n\n            // Reject overlong proof.\n            if (buf.readPos !== buf.byteLength) {\n                return false;\n            }\n\n            return true; // Accept\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        try {\n            const buf = new SerialBuffer(transaction.data);\n\n            Address.unserialize(buf); // sender address\n            Address.unserialize(buf); // recipient address\n            const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n            Hash.unserialize(buf, hashAlgorithm);\n            buf.readUint8(); // hash count\n            buf.readUint32(); // timeout\n\n            // Blacklist Argon2 hash function.\n            if (hashAlgorithm === Hash.Algorithm.ARGON2D) {\n                return false;\n            }\n\n            if (buf.readPos !== buf.byteLength) {\n                return false;\n            }\n\n            return Contract.verifyIncomingTransaction(transaction);\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) {\n        return new HashedTimeLockedContract(balance, this._sender, this._recipient, this._hashRoot, this._hashCount, this._timeout, this._totalAmount);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account|*}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        const buf = new SerialBuffer(transaction.proof);\n        const type = buf.readUint8();\n        let minCap = 0;\n        switch (type) {\n            case HashedTimeLockedContract.ProofType.REGULAR_TRANSFER: {\n                // Check that the contract has not expired yet.\n                if (this._timeout < blockHeight) {\n                    throw new Error('Proof Error!');\n                }\n\n                // Check that the provided hashRoot is correct.\n                const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n                const hashDepth = buf.readUint8();\n                const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n                if (!hashRoot.equals(this._hashRoot)) {\n                    throw new Error('Proof Error!');\n                }\n\n                // Ignore the preImage.\n                Hash.unserialize(buf, hashAlgorithm);\n\n                // Verify that the transaction is signed by the authorized recipient.\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._recipient)) {\n                    throw new Error('Proof Error!');\n                }\n\n                minCap = Math.max(0, Math.floor((1 - (hashDepth / this._hashCount)) * this._totalAmount));\n\n                break;\n            }\n            case HashedTimeLockedContract.ProofType.EARLY_RESOLVE: {\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._recipient)) {\n                    throw new Error('Proof Error!');\n                }\n\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._sender)) {\n                    throw new Error('Proof Error!');\n                }\n\n                break;\n            }\n            case HashedTimeLockedContract.ProofType.TIMEOUT_RESOLVE: {\n                if (this._timeout >= blockHeight) {\n                    throw new Error('Proof Error!');\n                }\n\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._sender)) {\n                    throw new Error('Proof Error!');\n                }\n\n                break;\n            }\n            default:\n                throw new Error('Proof Error!');\n        }\n\n        if (!revert) {\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < minCap) {\n                throw new Error('Balance Error!');\n            }\n        }\n\n        return super.withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert);\n    }\n\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        throw new Error('Illegal incoming transaction');\n    }\n}\n\nHashedTimeLockedContract.ProofType = {\n    REGULAR_TRANSFER: 1,\n    EARLY_RESOLVE: 2,\n    TIMEOUT_RESOLVE: 3\n};\n\nAccount.TYPE_MAP.set(Account.Type.HTLC, HashedTimeLockedContract);\nClass.register(HashedTimeLockedContract);\n","class VestingContract extends Contract {\n    /**\n     * @param {number} [balance]\n     * @param {Address} [owner]\n     * @param {number} [vestingStart]\n     * @param {number} [vestingStepBlocks]\n     * @param {number} [vestingStepAmount]\n     * @param {number} [vestingTotalAmount]\n     */\n    constructor(balance = 0, owner = Address.NULL, vestingStart = 0, vestingStepBlocks = 0, vestingStepAmount = balance, vestingTotalAmount = balance) {\n        super(Account.Type.VESTING, balance);\n        if (!(owner instanceof Address)) throw new Error('Malformed address');\n        if (!NumberUtils.isUint32(vestingStart)) throw new Error('Malformed vestingStart');\n        if (!NumberUtils.isUint32(vestingStepBlocks)) throw new Error('Malformed vestingStepBlocks');\n        if (!NumberUtils.isUint64(vestingStepAmount)) throw new Error('Malformed vestingStepAmount');\n        if (!NumberUtils.isUint64(vestingTotalAmount)) throw new Error('Malformed lowerCap');\n\n        /** @type {Address} */\n        this._owner = owner;\n        /** @type {number} */\n        this._vestingStart = vestingStart;\n        /** @type {number} */\n        this._vestingStepBlocks = vestingStepBlocks;\n        /** @type {number} */\n        this._vestingStepAmount = vestingStepAmount;\n        /** @type {number} */\n        this._vestingTotalAmount = vestingTotalAmount;\n    }\n\n    /**\n     * @param {number} balance\n     * @param {number} blockHeight\n     * @param {Transaction} transaction\n     */\n    static create(balance, blockHeight, transaction) {\n        /** @type {number} */\n        let vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount;\n        const buf = new SerialBuffer(transaction.data);\n        const owner = Address.unserialize(buf);\n        vestingTotalAmount = transaction.value;\n        switch (transaction.data.length) {\n            case Address.SERIALIZED_SIZE + 4:\n                // Only block number: vest full amount at that block\n                vestingStart = 0;\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = vestingTotalAmount;\n                break;\n            case Address.SERIALIZED_SIZE + 16:\n                vestingStart = buf.readUint32();\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = buf.readUint64();\n                break;\n            case Address.SERIALIZED_SIZE + 24:\n                // Create a vesting account with some instantly vested funds or additional funds considered.\n                vestingStart = buf.readUint32();\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = buf.readUint64();\n                vestingTotalAmount = buf.readUint64();\n                break;\n            default:\n                throw new Error('Invalid transaction data');\n        }\n        return new VestingContract(balance, owner, vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {VestingContract}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        if (type !== Account.Type.VESTING) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        const owner = Address.unserialize(buf);\n        const vestingStart = buf.readUint32();\n        const vestingStepBlocks = buf.readUint32();\n        const vestingStepAmount = buf.readUint64();\n        const vestingTotalAmount = buf.readUint64();\n        return new VestingContract(balance, owner, vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount);\n    }\n\n    /**\n     * Serialize this VestingContract object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._owner.serialize(buf);\n        buf.writeUint32(this._vestingStart);\n        buf.writeUint32(this._vestingStepBlocks);\n        buf.writeUint64(this._vestingStepAmount);\n        buf.writeUint64(this._vestingTotalAmount);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return super.serializedSize\n            + this._owner.serializedSize\n            + /*vestingStart*/ 4\n            + /*vestingStepBlocks*/ 4\n            + /*vestingStepAmount*/ 8\n            + /*vestingTotalAmount*/ 8;\n    }\n\n    /** @type {Address} */\n    get owner() {\n        return this._owner;\n    }\n\n    /** @type {number} */\n    get vestingStart() {\n        return this._vestingStart;\n    }\n\n    /** @type {number} */\n    get vestingStepBlocks() {\n        return this._vestingStepBlocks;\n    }\n\n    /** @type {number} */\n    get vestingStepAmount() {\n        return this._vestingStepAmount;\n    }\n\n    /** @type {number} */\n    get vestingTotalAmount() {\n        return this._vestingTotalAmount;\n    }\n\n    toString() {\n        return `VestingAccount{balance=${this._balance}, owner=${this._owner.toUserFriendlyAddress()}`;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return o instanceof VestingContract\n            && this._type === o._type\n            && this._balance === o._balance\n            && this._owner.equals(o._owner)\n            && this._vestingStart === o._vestingStart\n            && this._vestingStepBlocks === o._vestingStepBlocks\n            && this._vestingStepAmount === o._vestingStepAmount\n            && this._vestingTotalAmount === o._vestingTotalAmount;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyOutgoingTransaction(transaction) {\n        const buf = new SerialBuffer(transaction.proof);\n\n        if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n            return false;\n        }\n\n        if (buf.readPos !== buf.byteLength) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        switch (transaction.data.length) {\n            case Address.SERIALIZED_SIZE + 4:\n            case Address.SERIALIZED_SIZE + 16:\n            case Address.SERIALIZED_SIZE + 24:\n                return Contract.verifyIncomingTransaction(transaction);\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) {\n        return new VestingContract(balance, this._owner, this._vestingStart, this._vestingStepBlocks, this._vestingStepAmount, this._vestingTotalAmount);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account|*}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        if (!revert) {\n            const minCap = this.getMinCap(blockHeight);\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < minCap) {\n                throw new Error('Balance Error!');\n            }\n\n            const buf = new SerialBuffer(transaction.proof);\n            if (!SignatureProof.unserialize(buf).isSignedBy(this._owner)) {\n                throw new Error('Proof Error!');\n            }\n        }\n        return super.withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        throw new Error('Illegal incoming transaction');\n    }\n\n    /**\n     * @param {number} blockHeight\n     * @returns {number}\n     */\n    getMinCap(blockHeight) {\n        return this._vestingStepBlocks && this._vestingStepAmount > 0\n            ? Math.max(0, this._vestingTotalAmount - Math.floor((blockHeight - this._vestingStart) / this._vestingStepBlocks) * this._vestingStepAmount)\n            : 0;\n    }\n}\n\nAccount.TYPE_MAP.set(Account.Type.VESTING, VestingContract);\nClass.register(VestingContract);\n","class BlockHeader {\n    /**\n     * @param {Hash} prevHash\n     * @param {Hash} interlinkHash\n     * @param {Hash} bodyHash\n     * @param {Hash} accountsHash\n     * @param {number} nBits\n     * @param {number} height\n     * @param {number} timestamp\n     * @param {number} nonce\n     * @param {number} version\n     */\n    constructor(prevHash, interlinkHash, bodyHash, accountsHash, nBits, height, timestamp, nonce, version = BlockHeader.CURRENT_VERSION) {\n        if (!NumberUtils.isUint16(version)) throw 'Malformed version';\n        if (!Hash.isHash(prevHash)) throw 'Malformed prevHash';\n        if (!Hash.isHash(interlinkHash)) throw 'Malformed interlinkHash';\n        if (!Hash.isHash(bodyHash)) throw 'Malformed bodyHash';\n        if (!Hash.isHash(accountsHash)) throw 'Malformed accountsHash';\n        if (!NumberUtils.isUint32(nBits) || !BlockUtils.isValidCompact(nBits)) throw 'Malformed nBits';\n        if (!NumberUtils.isUint32(height)) throw 'Invalid height';\n        if (!NumberUtils.isUint32(timestamp)) throw 'Malformed timestamp';\n        if (!NumberUtils.isUint32(nonce)) throw 'Malformed nonce';\n\n        /** @type {number} */\n        this._version = version;\n        /** @type {Hash} */\n        this._prevHash = prevHash;\n        /** @type {Hash} */\n        this._interlinkHash = interlinkHash;\n        /** @type {Hash} */\n        this._bodyHash = bodyHash;\n        /** @type {Hash} */\n        this._accountsHash = accountsHash;\n        /** @type {number} */\n        this._nBits = nBits;\n        /** @type {number} */\n        this._height = height;\n        /** @type {number} */\n        this._timestamp = timestamp;\n        /** @type {number} */\n        this._nonce = nonce;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {BlockHeader}\n     */\n    static unserialize(buf) {\n        const version = buf.readUint16();\n        if (!BlockHeader.SUPPORTED_VERSIONS.includes(version)) throw new Error(`Unsupported block version ${version}`);\n        const prevHash = Hash.unserialize(buf);\n        const interlinkHash = Hash.unserialize(buf);\n        const bodyHash = Hash.unserialize(buf);\n        const accountsHash = Hash.unserialize(buf);\n        const nBits = buf.readUint32();\n        const height = buf.readUint32();\n        const timestamp = buf.readUint32();\n        const nonce = buf.readUint32();\n        return new BlockHeader(prevHash, interlinkHash, bodyHash, accountsHash, nBits, height, timestamp, nonce, version);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint16(this._version);\n        this._prevHash.serialize(buf);\n        this._interlinkHash.serialize(buf);\n        this._bodyHash.serialize(buf);\n        this._accountsHash.serialize(buf);\n        buf.writeUint32(this._nBits);\n        buf.writeUint32(this._height);\n        buf.writeUint32(this._timestamp);\n        buf.writeUint32(this._nonce);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*version*/ 2\n            + this._prevHash.serializedSize\n            + this._interlinkHash.serializedSize\n            + this._bodyHash.serializedSize\n            + this._accountsHash.serializedSize\n            + /*nBits*/ 4\n            + /*height*/ 4\n            + /*timestamp*/ 4\n            + /*nonce*/ 4;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {Promise.<boolean>}\n     */\n    async verifyProofOfWork(buf) {\n        const pow = await this.pow(buf);\n        return BlockUtils.isProofOfWork(pow, this.target);\n    }\n\n    /**\n     * @param {BlockHeader} prevHeader\n     * @returns {boolean}\n     */\n    isImmediateSuccessorOf(prevHeader) {\n        // Check that the height is one higher than the previous height.\n        if (this.height !== prevHeader.height + 1) {\n            return false;\n        }\n\n        // Check that the timestamp is greater or equal to the predecessor's timestamp.\n        if (this.timestamp < prevHeader.timestamp) {\n            return false;\n        }\n\n        // Check that the hash of the predecessor block equals prevHash.\n        const prevHash = prevHeader.hash();\n        if (!this.prevHash.equals(prevHash)) {\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {Hash}\n     */\n    hash(buf) {\n        this._hash = this._hash || Hash.light(this.serialize(buf));\n        return this._hash;\n    }\n    \n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {Promise.<Hash>}\n     */\n    async pow(buf) {\n        this._pow = this._pow || await Hash.hard(this.serialize(buf));\n        return this._pow;\n    }\n\n    /**\n     * @param {BlockHeader|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof BlockHeader\n            && this._prevHash.equals(o.prevHash)\n            && this._interlinkHash.equals(o.interlinkHash)\n            && this._bodyHash.equals(o.bodyHash)\n            && this._accountsHash.equals(o.accountsHash)\n            && this._nBits === o.nBits\n            && this._height === o.height\n            && this._timestamp === o.timestamp\n            && this._nonce === o.nonce;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return 'BlockHeader{'\n            + `prevHash=${this._prevHash}, `\n            + `interlinkHash=${this._interlinkHash}, `\n            + `bodyHash=${this._bodyHash}, `\n            + `accountsHash=${this._accountsHash}, `\n            + `nBits=${this._nBits.toString(16)}, `\n            + `height=${this._height}, `\n            + `timestamp=${this._timestamp}, `\n            + `nonce=${this._nonce}`\n            + '}';\n    }\n\n    /** @type {number} */\n    get version() {\n        return this._version;\n    }\n\n    /** @type {Hash} */\n    get prevHash() {\n        return this._prevHash;\n    }\n\n    /** @type {Hash} */\n    get interlinkHash() {\n        return this._interlinkHash;\n    }\n\n    /** @type {Hash} */\n    get bodyHash() {\n        return this._bodyHash;\n    }\n\n    /** @type {Hash} */\n    get accountsHash() {\n        return this._accountsHash;\n    }\n\n    /** @type {number} */\n    get nBits() {\n        return this._nBits;\n    }\n\n    /** @type {BigNumber} */\n    get target() {\n        return BlockUtils.compactToTarget(this._nBits);\n    }\n\n    /** @type {BigNumber} */\n    get difficulty() {\n        return BlockUtils.compactToDifficulty(this._nBits);\n    }\n\n    /** @type {number} */\n    get height() {\n        return this._height;\n    }\n\n    /** @type {number} */\n    get timestamp() {\n        return this._timestamp;\n    }\n\n    /** @type {number} */\n    get nonce() {\n        return this._nonce;\n    }\n\n    // XXX The miner changes the nonce of an existing BlockHeader during the\n    // mining process.\n    /** @type {number} */\n    set nonce(n) {\n        this._nonce = n;\n        this._hash = null;\n        this._pow = null;\n    }\n}\n// FIXME: Clean up for mainnet.\nBlockHeader.Version = {\n    V1: 1\n};\nBlockHeader.CURRENT_VERSION = BlockHeader.Version.V1;\nBlockHeader.SUPPORTED_VERSIONS = [\n    BlockHeader.Version.V1\n];\nBlockHeader.SERIALIZED_SIZE = 146;\nClass.register(BlockHeader);\n","class BlockInterlink {\n    /**\n     * @param {Array.<Hash>} hashes\n     * @param {Hash} prevHash\n     * @returns {{repeatBits: Uint8Array, compressed: Array.<Hash>}}\n     * @protected\n     */\n    static _compress(hashes, prevHash) {\n        const count = hashes.length;\n        const repeatBitsSize = Math.ceil(count / 8);\n        const repeatBits = new Uint8Array(repeatBitsSize);\n\n        let lastHash = prevHash;\n        const compressed = [];\n        for (let i = 0; i < count; i++) {\n            const hash = hashes[i];\n            if (!hash.equals(lastHash)) {\n                compressed.push(hash);\n                lastHash = hash;\n            } else {\n                repeatBits[Math.floor(i / 8)] |= 0x80 >>> (i % 8);\n            }\n        }\n\n        return {repeatBits, compressed};\n    }\n\n    /**\n     * @param {Array.<Hash>} hashes\n     * @param {Hash} [prevHash]\n     * @param {Uint8Array} [repeatBits]\n     * @param {Array.<Hash>} [compressed]\n     */\n    constructor(hashes, prevHash, repeatBits, compressed) {\n        if (!Array.isArray(hashes) || !NumberUtils.isUint8(hashes.length)\n            || hashes.some(it => !(it instanceof Hash))) throw new Error('Malformed hashes');\n        if ((repeatBits || compressed) && !(repeatBits && compressed)) throw new Error('Malformed repeatBits/compressed');\n        if (!prevHash && !repeatBits) throw new Error('Either prevHash or repeatBits/compressed required');\n\n        if (!repeatBits) {\n            ({repeatBits, compressed} = BlockInterlink._compress(hashes, prevHash));\n        }\n\n        /** @type {Array.<Hash>} */\n        this._hashes = hashes;\n        /** @type {Uint8Array} */\n        this._repeatBits = repeatBits;\n        /** @type {Array.<Hash>} */\n        this._compressed = compressed;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @param {Hash} prevHash\n     * @returns {BlockInterlink}\n     */\n    static unserialize(buf, prevHash) {\n        const count = buf.readUint8();\n        const repeatBitsSize = Math.ceil(count / 8);\n        const repeatBits = buf.read(repeatBitsSize);\n\n        let hash = prevHash;\n        const hashes = [];\n        const compressed = [];\n        for (let i = 0; i < count; i++) {\n            const repeated = (repeatBits[Math.floor(i / 8)] & (0x80 >>> (i % 8))) !== 0;\n            if (!repeated) {\n                hash = Hash.unserialize(buf);\n                compressed.push(hash);\n            }\n            hashes.push(hash);\n        }\n\n        return new BlockInterlink(hashes, prevHash, repeatBits, compressed);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._hashes.length);\n        buf.write(this._repeatBits);\n        for (const hash of this._compressed) {\n            hash.serialize(buf);\n        }\n        return buf;\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        return /*count*/ 1\n            + this._repeatBits.length\n            + this._compressed.reduce((sum, hash) => sum + hash.serializedSize, 0);\n    }\n\n    /**\n     * @param {BlockInterlink|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof BlockInterlink\n            && this._hashes.length === o._hashes.length\n            && this._hashes.every((hash, i) => hash.equals(o.hashes[i]));\n    }\n\n    /**\n     * @returns {Hash}\n     */\n    hash() {\n        if (!this._hash) {\n            this._hash = MerkleTree.computeRoot([this._repeatBits, GenesisConfig.GENESIS_HASH, ...this._compressed]);\n        }\n        return this._hash;\n    }\n\n    /**\n     * @type {Array.<Hash>}\n     */\n    get hashes() {\n        return this._hashes;\n    }\n\n    /**\n     * @type {number}\n     */\n    get length() {\n        return this._hashes.length;\n    }\n}\nClass.register(BlockInterlink);\n","class BlockBody {\n    /**\n     * @param {Uint8Array} extraData\n     * @returns {number}\n     */\n    static getMetadataSize(extraData) {\n        return Address.SERIALIZED_SIZE\n            + /*extraDataLength*/ 1\n            + extraData.byteLength\n            + /*transactionsLength*/ 2\n            + /*prunedAccountsLength*/ 2;\n    }\n\n    /**\n     * @param {Address} minerAddr\n     * @param {Array.<Transaction>} transactions\n     * @param {Uint8Array} [extraData]\n     * @param {Array.<PrunedAccount>} prunedAccounts\n     */\n    constructor(minerAddr, transactions, extraData = new Uint8Array(0), prunedAccounts = []) {\n        if (!(minerAddr instanceof Address)) throw 'Malformed minerAddr';\n        if (!Array.isArray(transactions) || transactions.some(it => !(it instanceof Transaction))) throw 'Malformed transactions';\n        if (!(extraData instanceof Uint8Array) || !NumberUtils.isUint8(extraData.byteLength)) throw 'Malformed extraData';\n\n        /** @type {Address} */\n        this._minerAddr = minerAddr;\n        /** @type {Uint8Array} */\n        this._extraData = extraData;\n        /** @type {Array.<Transaction>} */\n        this._transactions = transactions;\n        /** @type {Array.<PrunedAccount>} */\n        this._prunedAccounts = prunedAccounts;\n        /** @type {Hash} */\n        this._hash = null;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {BlockBody}\n     */\n    static unserialize(buf) {\n        const minerAddr = Address.unserialize(buf);\n        const extraDataLength = buf.readUint8();\n        const extraData = buf.read(extraDataLength);\n        const numTransactions = buf.readUint16();\n        const transactions = new Array(numTransactions);\n        for (let i = 0; i < numTransactions; i++) {\n            transactions[i] = Transaction.unserialize(buf);\n        }\n        const numPrunedAccounts = buf.readUint16();\n        const prunedAccounts = [];\n        for (let i = 0; i < numPrunedAccounts; i++) {\n            prunedAccounts.push(PrunedAccount.unserialize(buf));\n        }\n        return new BlockBody(minerAddr, transactions, extraData, prunedAccounts);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._minerAddr.serialize(buf);\n        buf.writeUint8(this._extraData.byteLength);\n        buf.write(this._extraData);\n        buf.writeUint16(this._transactions.length);\n        for (const tx of this._transactions) {\n            tx.serialize(buf);\n        }\n        buf.writeUint16(this._prunedAccounts.length);\n        for (const acc of this._prunedAccounts) {\n            acc.serialize(buf);\n        }\n        return buf;\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        let size = this._minerAddr.serializedSize\n            + /*extraDataLength*/ 1\n            + this._extraData.byteLength\n            + /*transactionsLength*/ 2\n            + /*prunedAccountsLength*/ 2;\n        for (const tx of this._transactions) {\n            size += tx.serializedSize;\n        }\n        size += this._prunedAccounts.reduce((sum, acc) => sum + acc.serializedSize, 0);\n        return size;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    verify() {\n        /** @type {Transaction} */\n        let previousTx = null;\n        for (const tx of this._transactions) {\n            // Ensure transactions are ordered and unique.\n            if (previousTx && previousTx.compareBlockOrder(tx) >= 0) {\n                Log.w(BlockBody, 'Invalid block - transactions not ordered.');\n                return false;\n            }\n            previousTx = tx;\n\n            // Check that all transactions are valid.\n            if (!tx.verify()) {\n                Log.w(BlockBody, 'Invalid block - invalid transaction');\n                return false;\n            }\n        }\n\n        let previousAcc = null;\n        for (const acc of this._prunedAccounts) {\n            // Ensure pruned accounts are ordered and unique.\n            if (previousAcc && previousAcc.compare(acc) >= 0) {\n                Log.w(BlockBody, 'Invalid block - pruned accounts not ordered.');\n                return false;\n            }\n            previousAcc = acc;\n            \n            // Check that pruned accounts are actually supposed to be pruned\n            if (!acc.account.isToBePruned()) {\n                Log.w(BlockBody, 'Invalid block - invalid pruned account');\n                return false;\n            }\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {Array}\n     */\n    getMerkleLeafs() {\n        return [this._minerAddr, this._extraData, ...this._transactions, ...this.prunedAccounts];\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        if (!this._hash) {\n            this._hash = MerkleTree.computeRoot(this.getMerkleLeafs());\n        }\n        return this._hash;\n    }\n\n    /**\n     * @param {BlockBody} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof BlockBody\n            && this._minerAddr.equals(o.minerAddr)\n            && BufferUtils.equals(this._extraData, o.extraData)\n            && this._transactions.length === o.transactions.length\n            && this._transactions.every((tx, i) => tx.equals(o.transactions[i]));\n    }\n\n    /**\n     * @return {Array.<Address>}\n     */\n    getAddresses() {\n        const addresses = [this._minerAddr];\n        for (const tx of this._transactions) {\n            addresses.push(tx.sender, tx.recipient);\n        }\n        return addresses;\n    }\n\n    /** @type {Uint8Array} */\n    get extraData() {\n        return this._extraData;\n    }\n\n    /** @type {Address} */\n    get minerAddr() {\n        return this._minerAddr;\n    }\n\n    /** @type {Array.<Transaction>} */\n    get transactions() {\n        return this._transactions;\n    }\n\n    /** @type {number} */\n    get transactionCount() {\n        return this._transactions.length;\n    }\n\n    /** @type {Array.<PrunedAccount>} */\n    get prunedAccounts() {\n        return this._prunedAccounts;\n    }\n}\n\nClass.register(BlockBody);\n","class BlockUtils {\n    /**\n     * @param {number} compact\n     * @returns {BigNumber}\n     */\n    static compactToTarget(compact) {\n        return new BigNumber(compact & 0xffffff).times(new BigNumber(2).pow(8 * ((compact >> 24) - 3)));\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {number}\n     */\n    static targetToCompact(target) {\n        if (!target.isFinite() || target.isNaN()) throw 'Invalid Target';\n\n        // Divide to get first byte\n        let size = Math.max(Math.ceil(Math.log2(target.toNumber()) / 8), 1);\n        const firstByte = target / Math.pow(2, (size - 1) * 8);\n\n        // If the first (most significant) byte is greater than 127 (0x7f),\n        // prepend a zero byte.\n        if (firstByte >= 0x80) {\n            size++;\n        }\n\n        // The first byte of the 'compact' format is the number of bytes,\n        // including the prepended zero if it's present.\n        // The following three bytes are the first three bytes of the above\n        // representation. If less than three bytes are present, then one or\n        // more of the last bytes of the compact representation will be zero.\n        return (size << 24) + ((target / Math.pow(2, (size - 3) * 8)) & 0xffffff);\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {number}\n     */\n    static getTargetHeight(target) {\n        // Precision loss should be ok here.\n        return Math.ceil(Math.log2(target.toNumber()));\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {number}\n     */\n    static getTargetDepth(target) {\n        return BlockUtils.getTargetHeight(Policy.BLOCK_TARGET_MAX) - BlockUtils.getTargetHeight(target);\n    }\n\n    /**\n     * @param {number} compact\n     * @returns {BigNumber}\n     */\n    static compactToDifficulty(compact) {\n        return Policy.BLOCK_TARGET_MAX.div(BlockUtils.compactToTarget(compact));\n    }\n\n    /**\n     * @param {BigNumber} difficulty\n     * @returns {number}\n     */\n    static difficultyToCompact(difficulty) {\n        return BlockUtils.targetToCompact(BlockUtils.difficultyToTarget(difficulty));\n    }\n\n    /**\n     * @param {BigNumber} difficulty\n     * @returns {BigNumber}\n     */\n    static difficultyToTarget(difficulty) {\n        return Policy.BLOCK_TARGET_MAX.div(difficulty);\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {BigNumber}\n     */\n    static targetToDifficulty(target) {\n        return Policy.BLOCK_TARGET_MAX.div(target);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {BigNumber}\n     */\n    static hashToTarget(hash) {\n        return new BigNumber(hash.toHex(), 16);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {BigNumber}\n     */\n    static realDifficulty(hash) {\n        return BlockUtils.targetToDifficulty(BlockUtils.hashToTarget(hash));\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {number}\n     */\n    static getHashDepth(hash) {\n        return BlockUtils.getTargetDepth(BlockUtils.hashToTarget(hash));\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {number} target\n     * @returns {boolean}\n     */\n    static isProofOfWork(hash, target) {\n        return parseInt(hash.toHex(), 16) <= target;\n    }\n\n    /**\n     * @param {number} compact\n     * @returns {boolean}\n     */\n\n    static isValidCompact(compact) {\n        return BlockUtils.isValidTarget(BlockUtils.compactToTarget(compact));\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {boolean}\n     */\n    static isValidTarget(target) {\n        return target.gte(1) && target.lte(Policy.BLOCK_TARGET_MAX);\n    }\n\n    /**\n     * @param {BlockHeader} headBlock\n     * @param {BlockHeader} tailBlock\n     * @param {BigNumber} deltaTotalDifficulty\n     * @returns {BigNumber}\n     */\n    static getNextTarget(headBlock, tailBlock, deltaTotalDifficulty) {\n        Assert.that(\n            (headBlock.height - tailBlock.height === Policy.DIFFICULTY_BLOCK_WINDOW)\n                || (headBlock.height <= Policy.DIFFICULTY_BLOCK_WINDOW && tailBlock.height === 1),\n            `Tail and head block must be ${Policy.DIFFICULTY_BLOCK_WINDOW} blocks apart`);\n\n        let actualTime = headBlock.timestamp - tailBlock.timestamp;\n\n        // Simulate that the Policy.BLOCK_TIME was achieved for the blocks before the genesis block, i.e. we simulate\n        // a sliding window that starts before the genesis block. Assume difficulty = 1 for these blocks.\n        if (headBlock.height <= Policy.DIFFICULTY_BLOCK_WINDOW) {\n            actualTime += (Policy.DIFFICULTY_BLOCK_WINDOW - headBlock.height + 1) * Policy.BLOCK_TIME;\n            deltaTotalDifficulty = deltaTotalDifficulty.plus(Policy.DIFFICULTY_BLOCK_WINDOW - headBlock.height + 1);\n        }\n\n        // Compute the target adjustment factor.\n        const expectedTime = Policy.DIFFICULTY_BLOCK_WINDOW * Policy.BLOCK_TIME;\n        let adjustment = actualTime / expectedTime;\n\n        // Clamp the adjustment factor to [1 / MAX_ADJUSTMENT_FACTOR, MAX_ADJUSTMENT_FACTOR].\n        adjustment = Math.max(adjustment, 1 / Policy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR);\n        adjustment = Math.min(adjustment, Policy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR);\n\n        // Compute the next target.\n        const averageDifficulty = deltaTotalDifficulty.div(Policy.DIFFICULTY_BLOCK_WINDOW);\n        const averageTarget = BlockUtils.difficultyToTarget(averageDifficulty);\n        let nextTarget = averageTarget.times(adjustment);\n\n        // Make sure the target is below or equal the maximum allowed target (difficulty 1).\n        // Also enforce a minimum target of 1.\n        nextTarget = BigNumber.min(nextTarget, Policy.BLOCK_TARGET_MAX);\n        nextTarget = BigNumber.max(nextTarget, 1);\n\n        // XXX Reduce target precision to nBits precision.\n        const nBits = BlockUtils.targetToCompact(nextTarget);\n        return BlockUtils.compactToTarget(nBits);\n    }\n}\nClass.register(BlockUtils);\n","class Block {\n    /**\n     * @param {BlockHeader} header\n     * @param {BlockInterlink} interlink\n     * @param {BlockBody} [body]\n     */\n    constructor(header, interlink, body) {\n        if (!(header instanceof BlockHeader)) throw 'Malformed header';\n        if (!(interlink instanceof BlockInterlink)) throw 'Malformed interlink';\n        if (body && !(body instanceof BlockBody)) throw 'Malformed body';\n\n        /** @type {BlockHeader} */\n        this._header = header;\n        /** @type {BlockInterlink} */\n        this._interlink = interlink;\n        /** @type {BlockBody} */\n        this._body = body;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {Block}\n     */\n    static unserialize(buf) {\n        const header = BlockHeader.unserialize(buf);\n        const interlink = BlockInterlink.unserialize(buf, header.prevHash);\n\n        let body = undefined;\n        const bodyPresent = buf.readUint8();\n        if (bodyPresent) {\n            body = BlockBody.unserialize(buf);\n        }\n\n        return new Block(header, interlink, body);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._header.serialize(buf);\n        this._interlink.serialize(buf);\n\n        if (this._body) {\n            buf.writeUint8(1);\n            this._body.serialize(buf);\n        } else {\n            buf.writeUint8(0);\n        }\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._header.serializedSize\n            + this._interlink.serializedSize\n            + /*bodyPresent*/ 1\n            + (this._body ? this._body.serializedSize : 0);\n    }\n\n    /**\n     * @param {Time} time\n     * @returns {Promise.<boolean>}\n     */\n    async verify(time) {\n        if (this._valid === undefined) {\n            if (this.isLight() || this.body.transactions.length < 150 || !IWorker.areWorkersAsync) {\n                // worker overhead doesn't pay off for small transaction numbers\n                this._valid = await this._verify(time.now());\n            } else {\n                const transactionValid = this.body.transactions.map(t => t._valid);\n                const worker = await CryptoWorker.getInstanceAsync();\n                const {valid, pow, interlinkHash, bodyHash} = await worker.blockVerify(this.serialize(),\n                    transactionValid, time.now(), GenesisConfig.GENESIS_HASH.serialize(), GenesisConfig.NETWORK_ID);\n                this._valid = valid;\n                this.header._pow = Hash.unserialize(new SerialBuffer(pow));\n                this.interlink._hash = Hash.unserialize(new SerialBuffer(interlinkHash));\n                this.body._hash = Hash.unserialize(new SerialBuffer(bodyHash));\n            }\n        }\n        return this._valid;\n    }\n\n    /**\n     * @param {number} timeNow\n     * @returns {Promise.<boolean>}\n     */\n    async _verify(timeNow) {\n        // Check that the timestamp is not too far into the future.\n        if (this._header.timestamp * 1000 > timeNow + Block.TIMESTAMP_DRIFT_MAX * 1000) {\n            Log.w(Block, 'Invalid block - timestamp too far in the future');\n            return false;\n        }\n\n        // Check that the header hash matches the difficulty.\n        if (!(await this._header.verifyProofOfWork())) {\n            Log.w(Block, 'Invalid block - PoW verification failed');\n            return false;\n        }\n\n        // Check that the maximum block size is not exceeded.\n        if (this.serializedSize > Policy.BLOCK_SIZE_MAX) {\n            Log.w(Block, 'Invalid block - max block size exceeded');\n            return false;\n        }\n\n        // Verify that the interlink is valid.\n        if (!this._verifyInterlink()) {\n            return false;\n        }\n\n        // XXX Verify the body only if it is present.\n        if (this.isFull() && !this._verifyBody()) {\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {boolean}\n     * @private\n     */\n    _verifyInterlink() {\n        // Skip check for genesis block due to the cyclic dependency (since the interlink hash contains the genesis block hash).\n        if (this.height === 1 && this._header.interlinkHash.equals(new Hash(null))) {\n            return true;\n        }\n\n        // Check that the interlinkHash given in the header matches the actual interlinkHash.\n        const interlinkHash = this._interlink.hash();\n        if (!this._header.interlinkHash.equals(interlinkHash)) {\n            Log.w(Block, 'Invalid block - interlink hash mismatch');\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {boolean}\n     * @private\n     */\n    _verifyBody() {\n        // Check that the body is valid.\n        if (!this._body.verify()) {\n            return false;\n        }\n\n        // Check that bodyHash given in the header matches the actual body hash.\n        const bodyHash = this._body.hash();\n        if (!this._header.bodyHash.equals(bodyHash)) {\n            Log.w(Block, 'Invalid block - body hash mismatch');\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {Block} predecessor\n     * @returns {Promise.<boolean>}\n     */\n    async isImmediateSuccessorOf(predecessor) {\n        // Check the header.\n        if (!this._header.isImmediateSuccessorOf(predecessor.header)) {\n            return false;\n        }\n\n        // Check that the interlink is correct.\n        const interlink = await predecessor.getNextInterlink(this.target, this.version);\n        if (!this._interlink.equals(interlink)) {\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {Block} predecessor\n     * @returns {Promise.<boolean>}\n     */\n    async isInterlinkSuccessorOf(predecessor) {\n        // Check that the height is higher than the predecessor's.\n        if (this._header.height <= predecessor.header.height) {\n            Log.v(Block, 'No interlink successor - height');\n            return false;\n        }\n\n        // Check that the timestamp is greater or equal to the predecessor's timestamp.\n        if (this._header.timestamp < predecessor.header.timestamp) {\n            Log.v(Block, 'No interlink successor - timestamp');\n            return false;\n        }\n\n        // Check that the predecessor is contained in this block's interlink and verify its position.\n        const prevHash = predecessor.hash();\n        if (!GenesisConfig.GENESIS_HASH.equals(prevHash)) {\n            const prevPow = await predecessor.pow();\n            const targetHeight = BlockUtils.getTargetHeight(this.target);\n            let blockFound = false;\n\n            let depth = 0;\n            for (; depth < this._interlink.length; depth++) {\n                if (prevHash.equals(this._interlink.hashes[depth])) {\n                    blockFound = true;\n                    if (!BlockUtils.isProofOfWork(prevPow, Math.pow(2, targetHeight - depth))) {\n                        Log.v(Block, 'No interlink successor - invalid position in interlink');\n                        return false;\n                    }\n                }\n            }\n\n            if (!blockFound) {\n                Log.v(Block, 'No interlink successor - not in interlink');\n                return false;\n            }\n        }\n\n        // If the predecessor happens to be the immediate predecessor, check additionally:\n        // - that the height of the successor is one higher\n        // - that the interlink is correct.\n        if (this._header.prevHash.equals(prevHash)) {\n            if (this._header.height !== predecessor.header.height + 1) {\n                Log.v(Block, 'No interlink successor - immediate height');\n                return false;\n            }\n\n            const interlink = await predecessor.getNextInterlink(this.target, this.version);\n            const interlinkHash = interlink.hash();\n            if (!this._header.interlinkHash.equals(interlinkHash)) {\n                Log.v(Block, 'No interlink successor - immediate interlink');\n                return false;\n            }\n        }\n        // Otherwise, if the prevHash doesn't match but the blocks should be adjacent according to their height fields,\n        // this cannot be a valid successor of predecessor.\n        else if (this._header.height === predecessor.height.height + 1) {\n            Log.v(Block, 'No interlink successor - immediate height (2)');\n            return false;\n        }\n        // Otherwise, check that the interlink construction is valid given the information we have.\n        else {\n            // TODO Take different targets into account.\n\n            // The number of new blocks in the interlink is bounded by the height difference.\n            /** @type {HashSet.<Hash>} */\n            const hashes = new HashSet();\n            hashes.addAll(this._interlink.hashes);\n            hashes.removeAll(predecessor.interlink.hashes);\n            if (hashes.length > this._header.height - predecessor.header.height) {\n                Log.v(Block, 'No interlink successor - too many new blocks');\n                return false;\n            }\n\n            // Check that the interlink is not too short.\n            const thisDepth = BlockUtils.getTargetDepth(this.target);\n            const prevDepth = BlockUtils.getTargetDepth(predecessor.target);\n            const depthDiff = thisDepth - prevDepth;\n            if (this._interlink.length < predecessor.interlink.length - depthDiff) {\n                Log.v(Block, 'No interlink successor - interlink too short');\n                return false;\n            }\n\n            // If the same block is found in both interlinks, all blocks at lower depths must be the same in both interlinks.\n            let commonBlock = false;\n            const thisInterlink = this._interlink.hashes;\n            const prevInterlink = predecessor.interlink.hashes;\n            for (let i = 1; i < prevInterlink.length && i - depthDiff < thisInterlink.length; i++) {\n                if (prevInterlink[i].equals(thisInterlink[i - depthDiff])) {\n                    commonBlock = true;\n                }\n                else if (commonBlock) {\n                    Log.v(Block, 'No interlink successor - invalid common suffix');\n                    return false;\n                }\n            }\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {Block} predecessor\n     * @returns {Promise.<boolean>}\n     */\n    async isSuccessorOf(predecessor) {\n        // TODO Improve this! Lots of duplicate checks.\n        return (await this.isImmediateSuccessorOf(predecessor)) || (await this.isInterlinkSuccessorOf(predecessor));\n    }\n\n    /**\n     * @param {BigNumber} nextTarget\n     * @param {number} [nextVersion]\n     * @returns {Promise.<BlockInterlink>}\n     */\n    async getNextInterlink(nextTarget, nextVersion = BlockHeader.CURRENT_VERSION) {\n        /** @type {Array.<Hash>} */\n        const hashes = [];\n        const hash = this.hash();\n\n        // Compute how many times this blockHash should be included in the next interlink.\n        const thisPowDepth = BlockUtils.getHashDepth(await this.pow());\n        const nextTargetDepth = BlockUtils.getTargetDepth(nextTarget);\n        const numOccurrences = Math.max(thisPowDepth - nextTargetDepth + 1, 0);\n\n        // Push this blockHash numOccurrences times onto the next interlink.\n        for (let i = 0; i < numOccurrences; i++) {\n            hashes.push(hash);\n        }\n\n        // Compute how many blocks to omit from the beginning of this interlink.\n        const thisTargetDepth = BlockUtils.getTargetDepth(this.target);\n        const targetOffset = nextTargetDepth - thisTargetDepth;\n        const interlinkOffset = numOccurrences + targetOffset;\n\n        // Push the remaining hashes from this interlink.\n        for (let i = interlinkOffset; i < this.interlink.length; i++) {\n            hashes.push(this.interlink.hashes[i]);\n        }\n        \n        return new BlockInterlink(hashes, hash);\n    }\n\n    /**\n     * @returns {Block}\n     */\n    shallowCopy() {\n        return new Block(this._header, this._interlink, this._body);\n    }\n\n    /**\n     * @param {Block|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof Block\n            && this._header.equals(o._header)\n            && this._interlink.equals(o._interlink)\n            && (this._body ? this._body.equals(o._body) : !o._body);\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isLight() {\n        return !this._body;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isFull() {\n        return !!this._body;\n    }\n\n    /**\n     * @returns {Block}\n     */\n    toLight() {\n        return this.isLight() ? this : new Block(this._header, this._interlink);\n    }\n\n    /**\n     * @param {BlockBody} body\n     * @returns {Block}\n     */\n    toFull(body) {\n        return this.isFull() ? this : new Block(this._header, this._interlink, body);\n    }\n\n    /**\n     * @type {BlockHeader}\n     */\n    get header() {\n        return this._header;\n    }\n\n    /**\n     * @type {BlockInterlink}\n     */\n    get interlink() {\n        return this._interlink;\n    }\n\n    /**\n     * @type {BlockBody}\n     */\n    get body() {\n        if (this.isLight()) {\n            throw 'Cannot access body of light block';\n        }\n        return this._body;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get version() {\n        return this._header.version;\n    }\n\n    /**\n     * @type {Hash}\n     */\n    get prevHash() {\n        return this._header.prevHash;\n    }\n\n    /**\n     * @type {Hash}\n     */\n    get bodyHash() {\n        return this._header.bodyHash;\n    }\n\n    /**\n     * @type {Hash}\n     */\n    get accountsHash() {\n        return this._header.accountsHash;\n    }\n\n    /**\n     * @type {number}\n     */\n    get nBits() {\n        return this._header.nBits;\n    }\n\n    /**\n     * @type {BigNumber}\n     */\n    get target() {\n        return this._header.target;\n    }\n\n    /**\n     * @type {BigNumber}\n     */\n    get difficulty() {\n        return this._header.difficulty;\n    }\n\n    /**\n     * @type {number}\n     */\n    get height() {\n        return this._header.height;\n    }\n    \n    /**\n     * @type {number}\n     */\n    get timestamp() {\n        return this._header.timestamp;\n    }\n\n    /**\n     * @type {number}\n     */\n    get nonce() {\n        return this._header.nonce;\n    }\n\n    /**\n     * @type {Address}\n     */\n    get minerAddr() {\n        return this._body.minerAddr;\n    }\n\n    /**\n     * @type {Array.<Transaction>}\n     */\n    get transactions() {\n        return this._body.transactions;\n    }\n\n    /**\n     * @type {number}\n     */\n    get transactionCount() {\n        return this._body.transactionCount;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {Hash}\n     */\n    hash(buf) {\n        return this._header.hash(buf);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {Promise.<Hash>}\n     */\n    pow(buf) {\n        return this._header.pow(buf);\n    }\n\n    toString() {\n        return `Block{height=${this.height},prev=${this.prevHash}}`;\n    }\n\n}\nBlock.TIMESTAMP_DRIFT_MAX = 600 /* seconds */; // 10 minutes\nClass.register(Block);\n","/**\n * @abstract\n */\nclass Transaction {\n    /**\n     * @param {Transaction.Format} format\n     * @param {Address} sender\n     * @param {Account.Type} senderType\n     * @param {Address} recipient\n     * @param {Account.Type} recipientType\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Transaction.Flag | *} flags\n     * @param {Uint8Array} data\n     * @param {Uint8Array} [proof]\n     * @param {number} [networkId]\n     */\n    constructor(format, sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId = GenesisConfig.NETWORK_ID) {\n        if (!(sender instanceof Address)) throw new Error('Malformed sender');\n        if (!NumberUtils.isUint8(senderType)) throw new Error('Malformed sender type');\n        if (!(recipient instanceof Address)) throw new Error('Malformed recipient');\n        if (!NumberUtils.isUint8(recipientType)) throw new Error('Malformed recipient type');\n        if (!NumberUtils.isUint64(value) || value === 0) throw new Error('Malformed value');\n        if (!NumberUtils.isUint64(fee)) throw new Error('Malformed fee');\n        if (!NumberUtils.isUint32(validityStartHeight)) throw new Error('Malformed validityStartHeight');\n        if (!NumberUtils.isUint8(flags) && (flags & ~(Transaction.Flag.ALL)) > 0) throw new Error('Malformed flags');\n        if (!(data instanceof Uint8Array) || !(NumberUtils.isUint16(data.byteLength))) throw new Error('Malformed data');\n        if (proof && (!(proof instanceof Uint8Array) || !(NumberUtils.isUint16(proof.byteLength)))) throw new Error('Malformed proof');\n        if (!NumberUtils.isUint8(networkId)) throw new Error('Malformed networkId');\n\n        /** @type {Transaction.Format} */\n        this._format = format;\n        /** @type {Address} */\n        this._sender = sender;\n        /** @type {Account.Type} */\n        this._senderType = senderType;\n        /** @type {Address} */\n        this._recipient = recipient;\n        /** @type {Account.Type} */\n        this._recipientType = recipientType;\n        /** @type {number} */\n        this._value = value;\n        /** @type {number} */\n        this._fee = fee;\n        /** @type {number} */\n        this._networkId = networkId;\n        /** @type {number} */\n        this._validityStartHeight = validityStartHeight;\n        /** @type {Transaction.Flag | *} */\n        this._flags = flags;\n        /** @type {Uint8Array} */\n        this._data = data;\n        /** @type {Uint8Array} */\n        this._proof = proof;\n\n        if (this._recipient === Address.CONTRACT_CREATION) this._recipient = this.getContractCreationAddress();\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const format = /** @type {Transaction.Format} */ buf.readUint8();\n        buf.readPos--;\n\n        if (!Transaction.FORMAT_MAP.has(format)) throw new Error('Invalid transaction type');\n        return Transaction.FORMAT_MAP.get(format).unserialize(buf);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serializeContent(buf) {\n        buf = buf || new SerialBuffer(this.serializedContentSize);\n        buf.writeUint16(this._data.byteLength);\n        buf.write(this._data);\n        this._sender.serialize(buf);\n        buf.writeUint8(this._senderType);\n        this._recipient.serialize(buf);\n        buf.writeUint8(this._recipientType);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._validityStartHeight);\n        buf.writeUint8(this._networkId);\n        buf.writeUint8(this._flags);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedContentSize() {\n        return /*dataSize*/ 2\n            + this._data.byteLength\n            + this._sender.serializedSize\n            + /*senderType*/ 1\n            + this._recipient.serializedSize\n            + /*recipientType*/ 1\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*validityStartHeight*/ 4\n            + /*networkId*/ 1\n            + /*flags*/ 1;\n    }\n\n    /**\n     * @param {number} [networkId]\n     * @returns {boolean}\n     */\n    verify(networkId) {\n        if (this._valid === undefined) {\n            this._valid = this._verify(networkId);\n        }\n        return this._valid;\n    }\n\n    /**\n     * @param {number} [networkId]\n     * @returns {boolean}\n     * @private\n     */\n    _verify(networkId = GenesisConfig.NETWORK_ID) {\n        if (this._networkId !== networkId) {\n            Log.w(Transaction, 'Transaction is not valid in this network', this);\n            return false;\n        }\n        // Check that sender != recipient.\n        if (this._recipient.equals(this._sender)) {\n            Log.w(Transaction, 'Sender and recipient must not match', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.has(this._senderType) || !Account.TYPE_MAP.has(this._recipientType)) {\n            Log.w(Transaction, 'Invalid account type', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.get(this._senderType).verifyOutgoingTransaction(this)) {\n            Log.w(Transaction, 'Invalid for sender', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.get(this._recipientType).verifyIncomingTransaction(this)) {\n            Log.w(Transaction, 'Invalid for recipient', this);\n            return false;\n        }\n        return true;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        throw new Error('Getter needs to be overwritten by subclasses');\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        throw new Error('Method needs to be overwritten by subclasses');\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        // Exclude the signature, we don't want transactions to be malleable.\n        this._hash = this._hash || Hash.light(this.serializeContent());\n        return this._hash;\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {number}\n     */\n    compare(o) {\n        if (this.fee / this.serializedSize > o.fee / o.serializedSize) return -1;\n        if (this.fee / this.serializedSize < o.fee / o.serializedSize) return 1;\n        if (this.serializedSize > o.serializedSize) return -1;\n        if (this.serializedSize < o.serializedSize) return 1;\n        if (this.fee > o.fee) return -1;\n        if (this.fee < o.fee) return 1;\n        if (this.value > o.value) return -1;\n        if (this.value < o.value) return 1;\n        return this.compareBlockOrder(o);\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {number}\n     */\n    compareBlockOrder(o) {\n        // This function must return 0 iff this.equals(o).\n        const recCompare = this._recipient.compare(o._recipient);\n        if (recCompare !== 0) return recCompare;\n        if (this._validityStartHeight < o._validityStartHeight) return -1;\n        if (this._validityStartHeight > o._validityStartHeight) return 1;\n        if (this._fee > o._fee) return -1;\n        if (this._fee < o._fee) return 1;\n        if (this._value > o._value) return -1;\n        if (this._value < o._value) return 1;\n        const senderCompare = this._sender.compare(o._sender);\n        if (senderCompare !== 0) return senderCompare;\n        if (this._recipientType < o._recipientType) return -1;\n        if (this._recipientType > o._recipientType) return 1;\n        if (this._senderType < o._senderType) return -1;\n        if (this._senderType > o._senderType) return 1;\n        if (this._flags < o._flags) return -1;\n        if (this._flags > o._flags) return 1;\n        return BufferUtils.compare(this._data, o._data);\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {boolean}\n     */\n    equals(o) {\n        // This ignores format and proof to be consistent with hash():\n        //   tx1.hash() == tx2.hash() iff tx1.equals(t2)\n        return o instanceof Transaction\n            && this._sender.equals(o._sender)\n            && this._senderType === o._senderType\n            && this._recipient.equals(o._recipient)\n            && this._recipientType === o._recipientType\n            && this._value === o._value\n            && this._fee === o._fee\n            && this._validityStartHeight === o._validityStartHeight\n            && this._networkId === o._networkId\n            && this._flags === o._flags\n            && BufferUtils.equals(this._data, o._data);\n    }\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return `Transaction{`\n            + `sender=${this._sender.toBase64()}, `\n            + `recipient=${this._recipient.toBase64()}, `\n            + `value=${this._value}, `\n            + `fee=${this._fee}, `\n            + `validityStartHeight=${this._validityStartHeight}, `\n            + `networkId=${this._networkId}`\n            + `}`;\n    }\n\n    /**\n     * @return {Address}\n     */\n    getContractCreationAddress() {\n        const tx = Transaction.unserialize(this.serialize());\n        tx._recipient = Address.NULL;\n        tx._hash = null;\n        return Address.fromHash(tx.hash());\n    }\n\n    /** @type {Address} */\n    get sender() {\n        return this._sender;\n    }\n\n    /** @type {Account.Type} */\n    get senderType() {\n        return this._senderType;\n    }\n\n    /** @type {Address} */\n    get recipient() {\n        return this._recipient;\n    }\n\n    /** @type {Account.Type} */\n    get recipientType() {\n        return this._recipientType;\n    }\n\n    /** @type {number} */\n    get value() {\n        return this._value;\n    }\n\n    /** @type {number} */\n    get fee() {\n        return this._fee;\n    }\n\n    /** @type {number} */\n    get feePerByte() {\n        return this._fee / this.serializedSize;\n    }\n\n    /** @type {number} */\n    get networkId() {\n        return this._networkId;\n    }\n\n    /** @type {number} */\n    get validityStartHeight() {\n        return this._validityStartHeight;\n    }\n\n    /** @type {number} */\n    get flags() {\n        return this._flags;\n    }\n\n    /**\n     * @param {Transaction.Flag} flag\n     * @returns {boolean}\n     */\n    hasFlag(flag) {\n        return (this._flags & flag) > 0;\n    }\n\n    /** @type {Uint8Array} */\n    get data() {\n        return this._data;\n    }\n\n    /** @type {Uint8Array} */\n    get proof() {\n        return this._proof;\n    }\n\n    // Sender proof is set by the Wallet after signing a transaction.\n    /** @type {Uint8Array} */\n    set proof(proof) {\n        this._proof = proof;\n    }\n}\n\n/**\n * Enum for Transaction formats.\n * @enum\n */\nTransaction.Format = {\n    BASIC: 0,\n    EXTENDED: 1\n};\n/**\n * @enum\n */\nTransaction.Flag = {\n    NONE: 0,\n    CONTRACT_CREATION: 0b1,\n    ALL: 0b1\n};\n/** @type {Map.<Transaction.Format, {unserialize: function(buf: SerialBuffer):Transaction}>} */\nTransaction.FORMAT_MAP = new Map();\n\nClass.register(Transaction);\n","class SignatureProof {\n    /**\n     * @param {Transaction} transaction\n     * @returns {boolean}\n     */\n    static verifyTransaction(transaction) {\n        try {\n            const buffer = new SerialBuffer(transaction.proof);\n            const proof = SignatureProof.unserialize(buffer);\n\n            // Reject proof if it is longer than needed.\n            if (buffer.readPos !== buffer.byteLength) {\n                Log.w(SignatureProof, 'Invalid SignatureProof - overlong');\n                return false;\n            }\n\n            return proof.verify(transaction.sender, transaction.serializeContent());\n        } catch (e) {\n            Log.w(SignatureProof, `Failed to verify transaction: ${e.message || e}`, e);\n            return false;\n        }\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Signature} signature\n     * @returns {SignatureProof}\n     */\n    static singleSig(publicKey, signature) {\n        return new SignatureProof(publicKey, new MerklePath([]), signature);\n    }\n\n    /**\n     * @param {PublicKey} signerKey\n     * @param {Array.<PublicKey>} publicKeys\n     * @param {Signature} signature\n     * @returns {SignatureProof}\n     */\n    static multiSig(signerKey, publicKeys, signature) {\n        const merklePath = MerklePath.compute(publicKeys, signerKey);\n        return new SignatureProof(signerKey, merklePath, signature);\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {MerklePath} merklePath\n     * @param {Signature} signature\n     */\n    constructor(publicKey, merklePath, signature) {\n        if (!(publicKey instanceof PublicKey)) throw new Error('Malformed publickKey');\n        if (!(merklePath instanceof MerklePath)) throw new Error('Malformed merklePath');\n        if (signature && !(signature instanceof Signature)) throw new Error('Malformed signature');\n\n        /**\n         * @type {PublicKey}\n         * @private\n         */\n        this._publicKey = publicKey;\n        /**\n         * @type {MerklePath}\n         * @private\n         */\n        this._merklePath = merklePath;\n        /**\n         * @type {Signature}\n         * @private\n         */\n        this._signature = signature;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {SignatureProof}\n     */\n    static unserialize(buf) {\n        const publicKey = PublicKey.unserialize(buf);\n        const merklePath = MerklePath.unserialize(buf);\n        const signature = Signature.unserialize(buf);\n        return new SignatureProof(publicKey, merklePath, signature);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._publicKey.serialize(buf);\n        this._merklePath.serialize(buf);\n\n        // The SignatureProof is sometimes serialized before the signature is set (e.g. when creating transactions).\n        // Simply don't serialize the signature if it's missing as this should never go over the wire.\n        // We always expect the signature to be present when unserializing.\n        if (this._signature) {\n            this._signature.serialize(buf);\n        }\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._publicKey.serializedSize\n            + this._merklePath.serializedSize\n            + (this._signature ? this._signature.serializedSize : 0);\n    }\n\n    /**\n     * @param {SignatureProof} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof SignatureProof\n            && this._publicKey.equals(o._publicKey)\n            && this._merklePath.equals(o._merklePath)\n            && (this._signature ? this._signature.equals(o._signature) : this._signature === o._signature);\n    }\n\n    /**\n     * @param {?Address} sender\n     * @param {Uint8Array} data\n     * @returns {boolean}\n     */\n    verify(sender, data) {\n        if (sender !== null && !this.isSignedBy(sender)) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signer does not match sender address');\n            return false;\n        }\n\n        if (!this._signature) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signature is missing');\n            return false;\n        }\n\n        if (!this._signature.verify(this._publicKey, data)) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signature is invalid');\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {Address} sender\n     * @returns {boolean}\n     */\n    isSignedBy(sender) {\n        const merkleRoot = this._merklePath.computeRoot(this._publicKey);\n        const signerAddr = Address.fromHash(merkleRoot);\n        return signerAddr.equals(sender);\n    }\n\n    /** @type {PublicKey} */\n    get publicKey() {\n        return this._publicKey;\n    }\n\n    /** @type {MerklePath} */\n    get merklePath() {\n        return this._merklePath;\n    }\n\n    /** @type {Signature} */\n    get signature() {\n        return this._signature;\n    }\n\n    /** @type {Signature} */\n    set signature(signature) {\n        this._signature = signature;\n    }\n}\n\nClass.register(SignatureProof);\n","class BasicTransaction extends Transaction {\n    /**\n     * @param {PublicKey} senderPubKey\n     * @param {Address} recipient\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Signature} [signature]\n     * @param {number} [networkId]\n     */\n    constructor(senderPubKey, recipient, value, fee, validityStartHeight, signature, networkId) {\n        if (!(senderPubKey instanceof PublicKey)) throw new Error('Malformed senderPubKey');\n        // Signature may be initially empty and can be set later.\n        if (signature !== undefined && !(signature instanceof Signature)) throw new Error('Malformed signature');\n\n        const proof = SignatureProof.singleSig(senderPubKey, signature);\n        super(Transaction.Format.BASIC, senderPubKey.toAddress(), Account.Type.BASIC, recipient, Account.Type.BASIC, value, fee, validityStartHeight, Transaction.Flag.NONE, new Uint8Array(0), proof.serialize(), networkId);\n\n        /**\n         * @type {SignatureProof}\n         * @private\n         */\n        this._signatureProof = proof;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        Assert.that(type === Transaction.Format.BASIC);\n\n        const senderPubKey = PublicKey.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const validityStartHeight = buf.readUint32();\n        const networkId = buf.readUint8();\n        const signature = Signature.unserialize(buf);\n        return new BasicTransaction(senderPubKey, recipient, value, fee, validityStartHeight, signature, networkId);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(Transaction.Format.BASIC);\n        this.senderPubKey.serialize(buf);\n        this._recipient.serialize(buf);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._validityStartHeight);\n        buf.writeUint8(this._networkId);\n        this.signature.serialize(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*type*/ 1\n            + this.senderPubKey.serializedSize\n            + this._recipient.serializedSize\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*validityStartHeight*/ 4\n            + /*networkId*/ 1\n            + this.signature.serializedSize;\n    }\n\n    /**\n     * @type {PublicKey}\n     */\n    get senderPubKey() {\n        return this._signatureProof.publicKey;\n    }\n\n    /**\n     * @type {Signature}\n     */\n    get signature() {\n        return this._signatureProof.signature;\n    }\n\n    /**\n     * @type {Signature}\n     */\n    set signature(signature) {\n        this._signatureProof.signature = signature;\n        this._proof = this._signatureProof.serialize();\n    }\n}\nTransaction.FORMAT_MAP.set(Transaction.Format.BASIC, BasicTransaction);\nClass.register(BasicTransaction);\n","class ExtendedTransaction extends Transaction {\n\n    /**\n     * @param {Address} sender\n     * @param {Account.Type} senderType\n     * @param {Address} recipient\n     * @param {Account.Type} recipientType\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Transaction.Flag | *} flags\n     * @param {Uint8Array} data\n     * @param {Uint8Array} [proof]\n     * @param {number} [networkId]\n     */\n    constructor(sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof = new Uint8Array(0), networkId) {\n        super(Transaction.Format.EXTENDED, sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const type = /** @type {Transaction.Format} */ buf.readUint8();\n        Assert.that(type === Transaction.Format.EXTENDED);\n\n        const dataSize = buf.readUint16();\n        const data = buf.read(dataSize);\n        const sender = Address.unserialize(buf);\n        const senderType = /** @type {Account.Type} */ buf.readUint8();\n        const recipient = Address.unserialize(buf);\n        const recipientType = /** @type {Account.Type} */ buf.readUint8();\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const validityStartHeight = buf.readUint32();\n        const networkId = buf.readUint8();\n        const flags = buf.readUint8();\n        const proofSize = buf.readUint16();\n        const proof = buf.read(proofSize);\n        return new ExtendedTransaction(sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(Transaction.Format.EXTENDED);\n        this.serializeContent(buf);\n        buf.writeUint16(this._proof.byteLength);\n        buf.write(this._proof);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*type*/ 1\n            + this.serializedContentSize\n            + /*proofSize*/ 2\n            + this._proof.byteLength;\n    }\n}\n\nTransaction.FORMAT_MAP.set(Transaction.Format.EXTENDED, ExtendedTransaction);\nClass.register(ExtendedTransaction);\n"]}